#!/usr/bin/env bash

set -Exeo pipefail

req_cpu_features_optimized=(adx sha sse sse2 avx2 avx sse4.2 sse4.1)

download_release_tarball() {
    __resultvar=$1
    __rust_sources_path=$2
    __repo_name=$3
    __release_type=$4

    # TODO: This function shouldn't make assumptions about how these releases'
    # names are constructed. Marginally less-bad would be to require that this
    # function's caller provide the release name.
    __release_name="${__repo_name}-$(uname)-${__release_type}"
    __release_sha1=$(git rev-parse HEAD)
    __release_tag="${__release_sha1:0:16}"
    __release_tag_url="https://api.github.com/repos/filecoin-project/${__repo_name}/releases/tags/${__release_tag}"

    echo "acquiring release @ ${__release_tag}"

    __release_response=$(curl \
        --retry 3 \
        --location $__release_tag_url)

    __release_url=$(echo $__release_response | jq -r ".assets[] | select(.name | contains(\"${__release_name}\")) | .url")

    if [[ -z "$__release_url" ]]; then
        (>&2 echo "failed to download release (tag URL: ${__release_tag_url}, response: ${__release_response})")
        return 1
    fi

    __tar_path="/tmp/${__release_name}_$(basename ${__release_url}).tar.gz"

    __asset_url=$(curl \
        --head \
        --retry 3 \
        --header "Accept:application/octet-stream" \
        --location \
        --output /dev/null \
        -w %{url_effective} \
        "$__release_url")

    curl --retry 3 --output "${__tar_path}" "$__asset_url"
    if [[ $? -ne "0" ]]; then
        (>&2 echo "failed to download release asset (tag URL: ${__release_tag_url}, asset URL: ${__asset_url})")
        return 1
    fi

    eval $__resultvar="'$__tar_path'"
}

build_from_source() {
    __library_name=$1
    __rust_sources_path=$2
    __release_type=$3
    __repo_sha1=$(git rev-parse HEAD)
    __repo_sha1_truncated="${__repo_sha1:0:16}"

    echo "building from source @ ${__repo_sha1_truncated}"

    if ! [ -x "$(command -v cargo)" ]; then
        (>&2 echo 'Error: cargo is not installed.')
        (>&2 echo 'Install Rust toolchain to resolve this problem.')
        exit 1
    fi

    if ! [ -x "$(command -v rustup)" ]; then
        (>&2 echo 'Error: rustup is not installed.')
        (>&2 echo 'Install Rust toolchain installer to resolve this problem.')
        exit 1
    fi

    pushd $__rust_sources_path

    cargo --version

    target_feature=""
    for x in ${req_cpu_features_optimized[@]}; do
        target_feature="+${x},${target_feature}"
    done

    if [ "${__release_type}" = "optimized" ]; then
        RUSTFLAGS="-C target-feature=${target_feature}" ./scripts/build-release.sh $__library_name $(cat rust-toolchain)
    else
        ./scripts/build-release.sh $__library_name $(cat rust-toolchain)
    fi

    popd
}

get_release_type() {
    searched="cat /proc/cpuinfo | grep flags"
    features=""

    # determine where to look for CPU features
    #
    if [[ ! -f "/proc/cpuinfo" ]]; then
        (>&2 echo "No /proc/cpuinfo file; falling back to Darwin feature detection")
        searched="sysctl -a | grep machdep.cpu | tr '[:upper:]' '[:lower:]' | grep features"
        features=$(eval "$searched")
    else
        features=$(cat /proc/cpuinfo | grep flags)
    fi

    # check for the presence of each required CPU feature
    #
    optimized=true
    for x in ${req_cpu_features_optimized[@]}; do
        if [ "$optimized" = true ]; then
            if ! [ -z "${features##*$x*}" ]; then
                (>&2 echo "Your CPU does not support the '${x}' feature (searched '${searched}')")
                optimized=false
            fi
        fi
    done

    # if we couldn't figure out where to look for features, use standard
    #
    if [ "$optimized" == true ] && ! [ -z "$features" ]; then
        (>&2 echo "Configuring 'optimized' build")
        echo "optimized"
    else
        (>&2 echo "Configuring 'standard' build")
        echo "standard"
    fi
}

cd "$(dirname "${BASH_SOURCE[0]}")"

rust_sources_dir="rust"

if [ "${FFI_BUILD_FROM_SOURCE}" != "1" ] && download_release_tarball tarball_path "${rust_sources_dir}" "filecoin-ffi" $(get_release_type); then
    tmp_dir=$(mktemp -d)
    tar -C "$tmp_dir" -xzf "$tarball_path"

    find -L "${tmp_dir}" -type f -name filecoin.h -exec cp -- "{}" . \;
    find -L "${tmp_dir}" -type f -name libfilecoin.a -exec cp -- "{}" . \;
    find -L "${tmp_dir}" -type f -name filecoin.pc -exec cp -- "{}" . \;

    (>&2 echo "successfully installed prebuilt libfilecoin")
else
    (>&2 echo "building libfilecoin from local sources (dir = ${rust_sources_dir})")

    build_from_source "filecoin" "${rust_sources_dir}" $(get_release_type)

    mkdir -p include
    mkdir -p lib/pkgconfig

    find -L "${rust_sources_dir}/target/release" -type f -name filecoin.h -exec cp -- "{}" . \;
    find -L "${rust_sources_dir}/target/release" -type f -name libfilecoin.a -exec cp -- "{}" . \;
    find -L "${rust_sources_dir}" -type f -name filecoin.pc -exec cp -- "{}" . \;

    if [[ ! -f "./filecoin.h" ]]; then
        (>&2 echo "failed to install filecoin.h")
        exit 1
    fi

    if [[ ! -f "./libfilecoin.a" ]]; then
        (>&2 echo "failed to install libfilecoin.a")
        exit 1
    fi

    if [[ ! -f "./filecoin.pc" ]]; then
        (>&2 echo "failed to install filecoin.pc")
        exit 1
    fi

    (>&2 echo "successfully built and installed libfilecoin from source")
fi
