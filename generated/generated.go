// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L${SRCDIR}/..
#cgo pkg-config: ${SRCDIR}/../filcrypto.pc
#include "../filcrypto.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// FilHash function as declared in filecoin-ffi/filcrypto.h:537
func FilHash(messagePtr []byte, messageLen uint) *FilHashResponse {
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.fil_hash(cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	__v := NewFilHashResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilAggregate function as declared in filecoin-ffi/filcrypto.h:549
func FilAggregate(flattenedSignaturesPtr []byte, flattenedSignaturesLen uint) *FilAggregateResponse {
	cflattenedSignaturesPtr, cflattenedSignaturesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedSignaturesPtr)))
	cflattenedSignaturesLen, cflattenedSignaturesLenAllocMap := (C.size_t)(flattenedSignaturesLen), cgoAllocsUnknown
	__ret := C.fil_aggregate(cflattenedSignaturesPtr, cflattenedSignaturesLen)
	runtime.KeepAlive(cflattenedSignaturesLenAllocMap)
	runtime.KeepAlive(cflattenedSignaturesPtrAllocMap)
	__v := NewFilAggregateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerify function as declared in filecoin-ffi/filcrypto.h:563
func FilVerify(signaturePtr []byte, flattenedDigestsPtr []byte, flattenedDigestsLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedDigestsPtr, cflattenedDigestsPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedDigestsPtr)))
	cflattenedDigestsLen, cflattenedDigestsLenAllocMap := (C.size_t)(flattenedDigestsLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.fil_verify(csignaturePtr, cflattenedDigestsPtr, cflattenedDigestsLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cflattenedDigestsLenAllocMap)
	runtime.KeepAlive(cflattenedDigestsPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// FilHashVerify function as declared in filecoin-ffi/filcrypto.h:581
func FilHashVerify(signaturePtr []byte, flattenedMessagesPtr []byte, flattenedMessagesLen uint, messageSizesPtr []uint, messageSizesLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedMessagesPtr, cflattenedMessagesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedMessagesPtr)))
	cflattenedMessagesLen, cflattenedMessagesLenAllocMap := (C.size_t)(flattenedMessagesLen), cgoAllocsUnknown
	cmessageSizesPtr, cmessageSizesPtrAllocMap := copyPSizeTBytes((*sliceHeader)(unsafe.Pointer(&messageSizesPtr)))
	cmessageSizesLen, cmessageSizesLenAllocMap := (C.size_t)(messageSizesLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.fil_hash_verify(csignaturePtr, cflattenedMessagesPtr, cflattenedMessagesLen, cmessageSizesPtr, cmessageSizesLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cmessageSizesLenAllocMap)
	runtime.KeepAlive(cmessageSizesPtrAllocMap)
	runtime.KeepAlive(cflattenedMessagesLenAllocMap)
	runtime.KeepAlive(cflattenedMessagesPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// FilPrivateKeyGenerate function as declared in filecoin-ffi/filcrypto.h:592
func FilPrivateKeyGenerate() *FilPrivateKeyGenerateResponse {
	__ret := C.fil_private_key_generate()
	__v := NewFilPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilPrivateKeyGenerateWithSeed function as declared in filecoin-ffi/filcrypto.h:605
func FilPrivateKeyGenerateWithSeed(rawSeed Fil32ByteArray) *FilPrivateKeyGenerateResponse {
	crawSeed, crawSeedAllocMap := rawSeed.PassValue()
	__ret := C.fil_private_key_generate_with_seed(crawSeed)
	runtime.KeepAlive(crawSeedAllocMap)
	__v := NewFilPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilPrivateKeySign function as declared in filecoin-ffi/filcrypto.h:618
func FilPrivateKeySign(rawPrivateKeyPtr []byte, messagePtr []byte, messageLen uint) *FilPrivateKeySignResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.fil_private_key_sign(crawPrivateKeyPtr, cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewFilPrivateKeySignResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilPrivateKeyPublicKey function as declared in filecoin-ffi/filcrypto.h:631
func FilPrivateKeyPublicKey(rawPrivateKeyPtr []byte) *FilPrivateKeyPublicKeyResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	__ret := C.fil_private_key_public_key(crawPrivateKeyPtr)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewFilPrivateKeyPublicKeyResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilCreateZeroSignature function as declared in filecoin-ffi/filcrypto.h:638
func FilCreateZeroSignature() *FilZeroSignatureResponse {
	__ret := C.fil_create_zero_signature()
	__v := NewFilZeroSignatureResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilDropSignature function as declared in filecoin-ffi/filcrypto.h:643
func FilDropSignature(sig []byte) {
	csig, csigAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sig)))
	C.fil_drop_signature(csig)
	runtime.KeepAlive(csigAllocMap)
}

// FilDestroyHashResponse function as declared in filecoin-ffi/filcrypto.h:645
func FilDestroyHashResponse(ptr *FilHashResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_hash_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyAggregateResponse function as declared in filecoin-ffi/filcrypto.h:647
func FilDestroyAggregateResponse(ptr *FilAggregateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_aggregate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyPrivateKeyGenerateResponse function as declared in filecoin-ffi/filcrypto.h:649
func FilDestroyPrivateKeyGenerateResponse(ptr *FilPrivateKeyGenerateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_generate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyPrivateKeySignResponse function as declared in filecoin-ffi/filcrypto.h:651
func FilDestroyPrivateKeySignResponse(ptr *FilPrivateKeySignResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_sign_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyPrivateKeyPublicKeyResponse function as declared in filecoin-ffi/filcrypto.h:653
func FilDestroyPrivateKeyPublicKeyResponse(ptr *FilPrivateKeyPublicKeyResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_public_key_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyZeroSignatureResponse function as declared in filecoin-ffi/filcrypto.h:655
func FilDestroyZeroSignatureResponse(ptr *FilZeroSignatureResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_zero_signature_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilWriteWithAlignment function as declared in filecoin-ffi/filcrypto.h:660
func FilWriteWithAlignment(registeredProof FilRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32, existingPieceSizes []FilArrayU64) *FilWriteWithAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	cexistingPieceSizes, cexistingPieceSizesAllocMap := unpackArgSFilArrayU64(existingPieceSizes)
	__ret := C.fil_write_with_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd, cexistingPieceSizes)
	packSFilArrayU64(existingPieceSizes, cexistingPieceSizes)
	runtime.KeepAlive(cexistingPieceSizesAllocMap)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilWriteWithAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilWriteWithoutAlignment function as declared in filecoin-ffi/filcrypto.h:669
func FilWriteWithoutAlignment(registeredProof FilRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32) *FilWriteWithoutAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	__ret := C.fil_write_without_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilWriteWithoutAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilFauxrep function as declared in filecoin-ffi/filcrypto.h:674
func FilFauxrep(registeredProof FilRegisteredSealProof, cacheDirPath []FilBytes, sealedSectorPath []FilBytes) *FilFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackArgSFilBytes(sealedSectorPath)
	__ret := C.fil_fauxrep(cregisteredProof, ccacheDirPath, csealedSectorPath)
	packSFilBytes(sealedSectorPath, csealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilFauxrep2 function as declared in filecoin-ffi/filcrypto.h:678
func FilFauxrep2(registeredProof FilRegisteredSealProof, cacheDirPath []FilBytes, existingPAuxPath []FilBytes) *FilFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	cexistingPAuxPath, cexistingPAuxPathAllocMap := unpackArgSFilBytes(existingPAuxPath)
	__ret := C.fil_fauxrep2(cregisteredProof, ccacheDirPath, cexistingPAuxPath)
	packSFilBytes(existingPAuxPath, cexistingPAuxPath)
	runtime.KeepAlive(cexistingPAuxPathAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilSealPreCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:685
func FilSealPreCommitPhase1(registeredProof FilRegisteredSealProof, cacheDirPath []FilBytes, stagedSectorPath []FilBytes, sealedSectorPath []FilBytes, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, pieces []FilArrayFilPublicPieceInfo) *FilSealPreCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	cstagedSectorPath, cstagedSectorPathAllocMap := unpackArgSFilBytes(stagedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackArgSFilBytes(sealedSectorPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cpieces, cpiecesAllocMap := unpackArgSFilArrayFilPublicPieceInfo(pieces)
	__ret := C.fil_seal_pre_commit_phase1(cregisteredProof, ccacheDirPath, cstagedSectorPath, csealedSectorPath, csectorId, cproverId, cticket, cpieces)
	packSFilArrayFilPublicPieceInfo(pieces, cpieces)
	runtime.KeepAlive(cpiecesAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	packSFilBytes(sealedSectorPath, csealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	packSFilBytes(stagedSectorPath, cstagedSectorPath)
	runtime.KeepAlive(cstagedSectorPathAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilSealPreCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilSealPreCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:697
func FilSealPreCommitPhase2(sealPreCommitPhase1Output []FilBytes, cacheDirPath []FilBytes, sealedSectorPath []FilBytes) *FilSealPreCommitPhase2Response {
	csealPreCommitPhase1Output, csealPreCommitPhase1OutputAllocMap := unpackArgSFilBytes(sealPreCommitPhase1Output)
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackArgSFilBytes(sealedSectorPath)
	__ret := C.fil_seal_pre_commit_phase2(csealPreCommitPhase1Output, ccacheDirPath, csealedSectorPath)
	packSFilBytes(sealedSectorPath, csealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	packSFilBytes(sealPreCommitPhase1Output, csealPreCommitPhase1Output)
	runtime.KeepAlive(csealPreCommitPhase1OutputAllocMap)
	__v := NewFilSealPreCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilSealCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:704
func FilSealCommitPhase1(registeredProof FilRegisteredSealProof, commR Fil32ByteArray, commD Fil32ByteArray, cacheDirPath []FilBytes, replicaPath []FilBytes, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, seed Fil32ByteArray, pieces []FilArrayFilPublicPieceInfo) *FilSealCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	creplicaPath, creplicaPathAllocMap := unpackArgSFilBytes(replicaPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	cpieces, cpiecesAllocMap := unpackArgSFilArrayFilPublicPieceInfo(pieces)
	__ret := C.fil_seal_commit_phase1(cregisteredProof, ccommR, ccommD, ccacheDirPath, creplicaPath, csectorId, cproverId, cticket, cseed, cpieces)
	packSFilArrayFilPublicPieceInfo(pieces, cpieces)
	runtime.KeepAlive(cpiecesAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	packSFilBytes(replicaPath, creplicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilSealCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilSealCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:715
func FilSealCommitPhase2(sealCommitPhase1Output []FilBytes, sectorId uint64, proverId Fil32ByteArray) *FilSealCommitPhase2Response {
	csealCommitPhase1Output, csealCommitPhase1OutputAllocMap := unpackArgSFilBytes(sealCommitPhase1Output)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_seal_commit_phase2(csealCommitPhase1Output, csectorId, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	packSFilBytes(sealCommitPhase1Output, csealCommitPhase1Output)
	runtime.KeepAlive(csealCommitPhase1OutputAllocMap)
	__v := NewFilSealCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilAggregateSealProofs function as declared in filecoin-ffi/filcrypto.h:719
func FilAggregateSealProofs(registeredProof FilRegisteredSealProof, registeredAggregation FilRegisteredAggregationProof, commRs FilArrayFil32ByteArray, seeds FilArrayFil32ByteArray, sealCommitResponses []FilArrayFilSealCommitPhase2) *FilAggregateProof {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.fil_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	ccommRs, ccommRsAllocMap := commRs.PassValue()
	cseeds, cseedsAllocMap := seeds.PassValue()
	csealCommitResponses, csealCommitResponsesAllocMap := unpackArgSFilArrayFilSealCommitPhase2(sealCommitResponses)
	__ret := C.fil_aggregate_seal_proofs(cregisteredProof, cregisteredAggregation, ccommRs, cseeds, csealCommitResponses)
	packSFilArrayFilSealCommitPhase2(sealCommitResponses, csealCommitResponses)
	runtime.KeepAlive(csealCommitResponsesAllocMap)
	runtime.KeepAlive(cseedsAllocMap)
	runtime.KeepAlive(ccommRsAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilAggregateProofRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifyAggregateSealProof function as declared in filecoin-ffi/filcrypto.h:728
func FilVerifyAggregateSealProof(registeredProof FilRegisteredSealProof, registeredAggregation FilRegisteredAggregationProof, proverId Fil32ByteArray, proof []FilBytes, commitInputs []FilArrayFilAggregationInputs) *FilVerifyAggregateSealProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.fil_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cproof, cproofAllocMap := unpackArgSFilBytes(proof)
	ccommitInputs, ccommitInputsAllocMap := unpackArgSFilArrayFilAggregationInputs(commitInputs)
	__ret := C.fil_verify_aggregate_seal_proof(cregisteredProof, cregisteredAggregation, cproverId, cproof, ccommitInputs)
	packSFilArrayFilAggregationInputs(commitInputs, ccommitInputs)
	runtime.KeepAlive(ccommitInputsAllocMap)
	packSFilBytes(proof, cproof)
	runtime.KeepAlive(cproofAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyAggregateSealProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilUnsealRange function as declared in filecoin-ffi/filcrypto.h:737
func FilUnsealRange(registeredProof FilRegisteredSealProof, cacheDirPath []FilBytes, sealedSectorFdRaw int32, unsealOutputFdRaw int32, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, commD Fil32ByteArray, unpaddedByteIndex uint64, unpaddedBytesAmount uint64) *FilUnsealRangeResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	csealedSectorFdRaw, csealedSectorFdRawAllocMap := (C.int)(sealedSectorFdRaw), cgoAllocsUnknown
	cunsealOutputFdRaw, cunsealOutputFdRawAllocMap := (C.int)(unsealOutputFdRaw), cgoAllocsUnknown
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cunpaddedByteIndex, cunpaddedByteIndexAllocMap := (C.uint64_t)(unpaddedByteIndex), cgoAllocsUnknown
	cunpaddedBytesAmount, cunpaddedBytesAmountAllocMap := (C.uint64_t)(unpaddedBytesAmount), cgoAllocsUnknown
	__ret := C.fil_unseal_range(cregisteredProof, ccacheDirPath, csealedSectorFdRaw, cunsealOutputFdRaw, csectorId, cproverId, cticket, ccommD, cunpaddedByteIndex, cunpaddedBytesAmount)
	runtime.KeepAlive(cunpaddedBytesAmountAllocMap)
	runtime.KeepAlive(cunpaddedByteIndexAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cunsealOutputFdRawAllocMap)
	runtime.KeepAlive(csealedSectorFdRawAllocMap)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilUnsealRangeResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifySeal function as declared in filecoin-ffi/filcrypto.h:751
func FilVerifySeal(registeredProof FilRegisteredSealProof, commR Fil32ByteArray, commD Fil32ByteArray, proverId Fil32ByteArray, ticket Fil32ByteArray, seed Fil32ByteArray, sectorId uint64, proof []FilBytes) *FilVerifySealResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproof, cproofAllocMap := unpackArgSFilBytes(proof)
	__ret := C.fil_verify_seal(cregisteredProof, ccommR, ccommD, cproverId, cticket, cseed, csectorId, cproof)
	packSFilBytes(proof, cproof)
	runtime.KeepAlive(cproofAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifySealResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:763
func FilGenerateWinningPostSectorChallenge(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, sectorSetLen uint64, proverId Fil32ByteArray) *FilGenerateWinningPoStSectorChallenge {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorSetLen, csectorSetLenAllocMap := (C.uint64_t)(sectorSetLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_winning_post_sector_challenge(cregisteredProof, crandomness, csectorSetLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorSetLenAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWinningPoStSectorChallengeRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateFallbackSectorChallenges function as declared in filecoin-ffi/filcrypto.h:771
func FilGenerateFallbackSectorChallenges(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, sectorIds []FilArrayU64, proverId Fil32ByteArray) *FilGenerateFallbackSectorChallengesResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorIds, csectorIdsAllocMap := unpackArgSFilArrayU64(sectorIds)
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_fallback_sector_challenges(cregisteredProof, crandomness, csectorIds, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	packSFilArrayU64(sectorIds, csectorIds)
	runtime.KeepAlive(csectorIdsAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateFallbackSectorChallengesResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateSingleVanillaProof function as declared in filecoin-ffi/filcrypto.h:779
func FilGenerateSingleVanillaProof(replica FilPrivateReplicaInfo, challenges []FilArrayU64) *FilGenerateSingleVanillaProofResponse {
	creplica, creplicaAllocMap := replica.PassValue()
	cchallenges, cchallengesAllocMap := unpackArgSFilArrayU64(challenges)
	__ret := C.fil_generate_single_vanilla_proof(creplica, cchallenges)
	packSFilArrayU64(challenges, cchallenges)
	runtime.KeepAlive(cchallengesAllocMap)
	runtime.KeepAlive(creplicaAllocMap)
	__v := NewFilGenerateSingleVanillaProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateWinningPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:785
func FilGenerateWinningPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofs []FilArrayFilVanillaProof) *FilGenerateWinningPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofs, cvanillaProofsAllocMap := unpackArgSFilArrayFilVanillaProof(vanillaProofs)
	__ret := C.fil_generate_winning_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofs)
	packSFilArrayFilVanillaProof(vanillaProofs, cvanillaProofs)
	runtime.KeepAlive(cvanillaProofsAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateWinningPost function as declared in filecoin-ffi/filcrypto.h:793
func FilGenerateWinningPost(randomness Fil32ByteArray, replicas []FilArrayFilPrivateReplicaInfo, proverId Fil32ByteArray) *FilGenerateWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicas, creplicasAllocMap := unpackArgSFilArrayFilPrivateReplicaInfo(replicas)
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_winning_post(crandomness, creplicas, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	packSFilArrayFilPrivateReplicaInfo(replicas, creplicas)
	runtime.KeepAlive(creplicasAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifyWinningPost function as declared in filecoin-ffi/filcrypto.h:800
func FilVerifyWinningPost(randomness Fil32ByteArray, replicas []FilArrayFilPublicReplicaInfo, proofs []FilArrayFilPoStProof, proverId Fil32ByteArray) *FilVerifyWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicas, creplicasAllocMap := unpackArgSFilArrayFilPublicReplicaInfo(replicas)
	cproofs, cproofsAllocMap := unpackArgSFilArrayFilPoStProof(proofs)
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_verify_winning_post(crandomness, creplicas, cproofs, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	packSFilArrayFilPoStProof(proofs, cproofs)
	runtime.KeepAlive(cproofsAllocMap)
	packSFilArrayFilPublicReplicaInfo(replicas, creplicas)
	runtime.KeepAlive(creplicasAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilVerifyWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:808
func FilGenerateWindowPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofs []FilArrayFilVanillaProof) *FilGenerateWindowPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofs, cvanillaProofsAllocMap := unpackArgSFilArrayFilVanillaProof(vanillaProofs)
	__ret := C.fil_generate_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofs)
	packSFilArrayFilVanillaProof(vanillaProofs, cvanillaProofs)
	runtime.KeepAlive(cvanillaProofsAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateWindowPost function as declared in filecoin-ffi/filcrypto.h:816
func FilGenerateWindowPost(randomness Fil32ByteArray, replicas []FilArrayFilPrivateReplicaInfo, proverId Fil32ByteArray) *FilGenerateWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicas, creplicasAllocMap := unpackArgSFilArrayFilPrivateReplicaInfo(replicas)
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_window_post(crandomness, creplicas, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	packSFilArrayFilPrivateReplicaInfo(replicas, creplicas)
	runtime.KeepAlive(creplicasAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifyWindowPost function as declared in filecoin-ffi/filcrypto.h:823
func FilVerifyWindowPost(randomness Fil32ByteArray, replicas []FilArrayFilPublicReplicaInfo, proofs []FilArrayFilPoStProof, proverId Fil32ByteArray) *FilVerifyWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicas, creplicasAllocMap := unpackArgSFilArrayFilPublicReplicaInfo(replicas)
	cproofs, cproofsAllocMap := unpackArgSFilArrayFilPoStProof(proofs)
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_verify_window_post(crandomness, creplicas, cproofs, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	packSFilArrayFilPoStProof(proofs, cproofs)
	runtime.KeepAlive(cproofsAllocMap)
	packSFilArrayFilPublicReplicaInfo(replicas, creplicas)
	runtime.KeepAlive(creplicasAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilVerifyWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilMergeWindowPostPartitionProofs function as declared in filecoin-ffi/filcrypto.h:831
func FilMergeWindowPostPartitionProofs(registeredProof FilRegisteredPoStProof, partitionProofs []FilArrayFilPartitionSnarkProof) *FilMergeWindowPoStPartitionProofsResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cpartitionProofs, cpartitionProofsAllocMap := unpackArgSFilArrayFilPartitionSnarkProof(partitionProofs)
	__ret := C.fil_merge_window_post_partition_proofs(cregisteredProof, cpartitionProofs)
	packSFilArrayFilPartitionSnarkProof(partitionProofs, cpartitionProofs)
	runtime.KeepAlive(cpartitionProofsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilMergeWindowPoStPartitionProofsResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetNumPartitionForFallbackPost function as declared in filecoin-ffi/filcrypto.h:837
func FilGetNumPartitionForFallbackPost(registeredProof FilRegisteredPoStProof, numSectors uint) *FilGetNumPartitionForFallbackPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cnumSectors, cnumSectorsAllocMap := (C.size_t)(numSectors), cgoAllocsUnknown
	__ret := C.fil_get_num_partition_for_fallback_post(cregisteredProof, cnumSectors)
	runtime.KeepAlive(cnumSectorsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGetNumPartitionForFallbackPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateSingleWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:843
func FilGenerateSingleWindowPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofs []FilArrayFilVanillaProof, partitionIndex uint) *FilGenerateSingleWindowPoStWithVanillaResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofs, cvanillaProofsAllocMap := unpackArgSFilArrayFilVanillaProof(vanillaProofs)
	cpartitionIndex, cpartitionIndexAllocMap := (C.size_t)(partitionIndex), cgoAllocsUnknown
	__ret := C.fil_generate_single_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofs, cpartitionIndex)
	runtime.KeepAlive(cpartitionIndexAllocMap)
	packSFilArrayFilVanillaProof(vanillaProofs, cvanillaProofs)
	runtime.KeepAlive(cvanillaProofsAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateSingleWindowPoStWithVanillaResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilEmptySectorUpdateEncodeInto function as declared in filecoin-ffi/filcrypto.h:852
func FilEmptySectorUpdateEncodeInto(registeredProof FilRegisteredUpdateProof, newReplicaPath []FilBytes, newCacheDirPath []FilBytes, sectorKeyPath []FilBytes, sectorKeyCacheDirPath []FilBytes, stagedDataPath []FilBytes, pieces []FilArrayFilPublicPieceInfo) *FilEmptySectorUpdateEncodeIntoResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cnewReplicaPath, cnewReplicaPathAllocMap := unpackArgSFilBytes(newReplicaPath)
	cnewCacheDirPath, cnewCacheDirPathAllocMap := unpackArgSFilBytes(newCacheDirPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackArgSFilBytes(sectorKeyPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackArgSFilBytes(sectorKeyCacheDirPath)
	cstagedDataPath, cstagedDataPathAllocMap := unpackArgSFilBytes(stagedDataPath)
	cpieces, cpiecesAllocMap := unpackArgSFilArrayFilPublicPieceInfo(pieces)
	__ret := C.fil_empty_sector_update_encode_into(cregisteredProof, cnewReplicaPath, cnewCacheDirPath, csectorKeyPath, csectorKeyCacheDirPath, cstagedDataPath, cpieces)
	packSFilArrayFilPublicPieceInfo(pieces, cpieces)
	runtime.KeepAlive(cpiecesAllocMap)
	packSFilBytes(stagedDataPath, cstagedDataPath)
	runtime.KeepAlive(cstagedDataPathAllocMap)
	packSFilBytes(sectorKeyCacheDirPath, csectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	packSFilBytes(sectorKeyPath, csectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	packSFilBytes(newCacheDirPath, cnewCacheDirPath)
	runtime.KeepAlive(cnewCacheDirPathAllocMap)
	packSFilBytes(newReplicaPath, cnewReplicaPath)
	runtime.KeepAlive(cnewReplicaPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateEncodeIntoResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilEmptySectorUpdateDecodeFrom function as declared in filecoin-ffi/filcrypto.h:863
func FilEmptySectorUpdateDecodeFrom(registeredProof FilRegisteredUpdateProof, outDataPath []FilBytes, replicaPath []FilBytes, sectorKeyPath []FilBytes, sectorKeyCacheDirPath []FilBytes, commDNew Fil32ByteArray) *FilEmptySectorUpdateDecodeFromResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	coutDataPath, coutDataPathAllocMap := unpackArgSFilBytes(outDataPath)
	creplicaPath, creplicaPathAllocMap := unpackArgSFilBytes(replicaPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackArgSFilBytes(sectorKeyPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackArgSFilBytes(sectorKeyCacheDirPath)
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_empty_sector_update_decode_from(cregisteredProof, coutDataPath, creplicaPath, csectorKeyPath, csectorKeyCacheDirPath, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	packSFilBytes(sectorKeyCacheDirPath, csectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	packSFilBytes(sectorKeyPath, csectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	packSFilBytes(replicaPath, creplicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	packSFilBytes(outDataPath, coutDataPath)
	runtime.KeepAlive(coutDataPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateDecodeFromResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilEmptySectorUpdateRemoveEncodedData function as declared in filecoin-ffi/filcrypto.h:873
func FilEmptySectorUpdateRemoveEncodedData(registeredProof FilRegisteredUpdateProof, sectorKeyPath []FilBytes, sectorKeyCacheDirPath []FilBytes, replicaPath []FilBytes, replicaCachePath []FilBytes, dataPath []FilBytes, commDNew Fil32ByteArray) *FilEmptySectorUpdateRemoveEncodedDataResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	csectorKeyPath, csectorKeyPathAllocMap := unpackArgSFilBytes(sectorKeyPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackArgSFilBytes(sectorKeyCacheDirPath)
	creplicaPath, creplicaPathAllocMap := unpackArgSFilBytes(replicaPath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackArgSFilBytes(replicaCachePath)
	cdataPath, cdataPathAllocMap := unpackArgSFilBytes(dataPath)
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_empty_sector_update_remove_encoded_data(cregisteredProof, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath, cdataPath, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	packSFilBytes(dataPath, cdataPath)
	runtime.KeepAlive(cdataPathAllocMap)
	packSFilBytes(replicaCachePath, creplicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	packSFilBytes(replicaPath, creplicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	packSFilBytes(sectorKeyCacheDirPath, csectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	packSFilBytes(sectorKeyPath, csectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateRemoveEncodedDataResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:884
func FilGenerateEmptySectorUpdatePartitionProofs(registeredProof FilRegisteredUpdateProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray, sectorKeyPath []FilBytes, sectorKeyCacheDirPath []FilBytes, replicaPath []FilBytes, replicaCachePath []FilBytes) *FilPartitionProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	csectorKeyPath, csectorKeyPathAllocMap := unpackArgSFilBytes(sectorKeyPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackArgSFilBytes(sectorKeyCacheDirPath)
	creplicaPath, creplicaPathAllocMap := unpackArgSFilBytes(replicaPath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackArgSFilBytes(replicaCachePath)
	__ret := C.fil_generate_empty_sector_update_partition_proofs(cregisteredProof, ccommROld, ccommRNew, ccommDNew, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath)
	packSFilBytes(replicaCachePath, creplicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	packSFilBytes(replicaPath, creplicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	packSFilBytes(sectorKeyCacheDirPath, csectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	packSFilBytes(sectorKeyPath, csectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilPartitionProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifyEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:896
func FilVerifyEmptySectorUpdatePartitionProofs(registeredProof FilRegisteredUpdateProof, proofs []FilArrayFilPartitionProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilVerifyPartitionProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cproofs, cproofsAllocMap := unpackArgSFilArrayFilPartitionProof(proofs)
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_verify_empty_sector_update_partition_proofs(cregisteredProof, cproofs, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	packSFilArrayFilPartitionProof(proofs, cproofs)
	runtime.KeepAlive(cproofsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyPartitionProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateEmptySectorUpdateProofWithVanilla function as declared in filecoin-ffi/filcrypto.h:905
func FilGenerateEmptySectorUpdateProofWithVanilla(registeredProof FilRegisteredUpdateProof, vanillaProofs []FilArrayFilPartitionProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cvanillaProofs, cvanillaProofsAllocMap := unpackArgSFilArrayFilPartitionProof(vanillaProofs)
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_generate_empty_sector_update_proof_with_vanilla(cregisteredProof, cvanillaProofs, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	packSFilArrayFilPartitionProof(vanillaProofs, cvanillaProofs)
	runtime.KeepAlive(cvanillaProofsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:914
func FilGenerateEmptySectorUpdateProof(registeredProof FilRegisteredUpdateProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray, sectorKeyPath []FilBytes, sectorKeyCacheDirPath []FilBytes, replicaPath []FilBytes, replicaCachePath []FilBytes) *FilEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	csectorKeyPath, csectorKeyPathAllocMap := unpackArgSFilBytes(sectorKeyPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackArgSFilBytes(sectorKeyCacheDirPath)
	creplicaPath, creplicaPathAllocMap := unpackArgSFilBytes(replicaPath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackArgSFilBytes(replicaCachePath)
	__ret := C.fil_generate_empty_sector_update_proof(cregisteredProof, ccommROld, ccommRNew, ccommDNew, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath)
	packSFilBytes(replicaCachePath, creplicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	packSFilBytes(replicaPath, creplicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	packSFilBytes(sectorKeyCacheDirPath, csectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	packSFilBytes(sectorKeyPath, csectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilVerifyEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:926
func FilVerifyEmptySectorUpdateProof(registeredProof FilRegisteredUpdateProof, proof []FilBytes, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilVerifyEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cproof, cproofAllocMap := unpackArgSFilBytes(proof)
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_verify_empty_sector_update_proof(cregisteredProof, cproof, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	packSFilBytes(proof, cproof)
	runtime.KeepAlive(cproofAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGeneratePieceCommitment function as declared in filecoin-ffi/filcrypto.h:936
func FilGeneratePieceCommitment(registeredProof FilRegisteredSealProof, pieceFdRaw int32, unpaddedPieceSize uint64) *FilGeneratePieceCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpieceFdRaw, cpieceFdRawAllocMap := (C.int)(pieceFdRaw), cgoAllocsUnknown
	cunpaddedPieceSize, cunpaddedPieceSizeAllocMap := (C.uint64_t)(unpaddedPieceSize), cgoAllocsUnknown
	__ret := C.fil_generate_piece_commitment(cregisteredProof, cpieceFdRaw, cunpaddedPieceSize)
	runtime.KeepAlive(cunpaddedPieceSizeAllocMap)
	runtime.KeepAlive(cpieceFdRawAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGeneratePieceCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGenerateDataCommitment function as declared in filecoin-ffi/filcrypto.h:943
func FilGenerateDataCommitment(registeredProof FilRegisteredSealProof, pieces []FilArrayFilPublicPieceInfo) *FilGenerateDataCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpieces, cpiecesAllocMap := unpackArgSFilArrayFilPublicPieceInfo(pieces)
	__ret := C.fil_generate_data_commitment(cregisteredProof, cpieces)
	packSFilArrayFilPublicPieceInfo(pieces, cpieces)
	runtime.KeepAlive(cpiecesAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateDataCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilClearCache function as declared in filecoin-ffi/filcrypto.h:946
func FilClearCache(sectorSize uint64, cacheDirPath []FilBytes) *FilClearCacheResponse {
	csectorSize, csectorSizeAllocMap := (C.uint64_t)(sectorSize), cgoAllocsUnknown
	ccacheDirPath, ccacheDirPathAllocMap := unpackArgSFilBytes(cacheDirPath)
	__ret := C.fil_clear_cache(csectorSize, ccacheDirPath)
	packSFilBytes(cacheDirPath, ccacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(csectorSizeAllocMap)
	__v := NewFilClearCacheResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilDestroyWriteWithAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:948
func FilDestroyWriteWithAlignmentResponse(ptr *FilWriteWithAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_write_with_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyWriteWithoutAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:950
func FilDestroyWriteWithoutAlignmentResponse(ptr *FilWriteWithoutAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_write_without_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyFauxrepResponse function as declared in filecoin-ffi/filcrypto.h:952
func FilDestroyFauxrepResponse(ptr *FilFauxRepResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_fauxrep_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroySealPreCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:954
func FilDestroySealPreCommitPhase1Response(ptr *FilSealPreCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_pre_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroySealPreCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:956
func FilDestroySealPreCommitPhase2Response(ptr *FilSealPreCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_pre_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroySealCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:958
func FilDestroySealCommitPhase1Response(ptr *FilSealCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroySealCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:960
func FilDestroySealCommitPhase2Response(ptr *FilSealCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyUnsealRangeResponse function as declared in filecoin-ffi/filcrypto.h:962
func FilDestroyUnsealRangeResponse(ptr *FilUnsealRangeResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_unseal_range_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGeneratePieceCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:964
func FilDestroyGeneratePieceCommitmentResponse(ptr *FilGeneratePieceCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_piece_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateDataCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:966
func FilDestroyGenerateDataCommitmentResponse(ptr *FilGenerateDataCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_data_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyStringResponse function as declared in filecoin-ffi/filcrypto.h:968
func FilDestroyStringResponse(ptr *FilStringResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_string_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilGetMaxUserBytesPerStagedSector function as declared in filecoin-ffi/filcrypto.h:973
func FilGetMaxUserBytesPerStagedSector(registeredProof FilRegisteredSealProof) uint64 {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_max_user_bytes_per_staged_sector(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// FilGetSealParamsCid function as declared in filecoin-ffi/filcrypto.h:978
func FilGetSealParamsCid(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetSealVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:983
func FilGetSealVerifyingKeyCid(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetSealParamsPath function as declared in filecoin-ffi/filcrypto.h:989
func FilGetSealParamsPath(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetSealVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:995
func FilGetSealVerifyingKeyPath(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetSealCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:1000
func FilGetSealCircuitIdentifier(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetSealVersion function as declared in filecoin-ffi/filcrypto.h:1005
func FilGetSealVersion(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostParamsCid function as declared in filecoin-ffi/filcrypto.h:1010
func FilGetPostParamsCid(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:1015
func FilGetPostVerifyingKeyCid(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostParamsPath function as declared in filecoin-ffi/filcrypto.h:1021
func FilGetPostParamsPath(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:1027
func FilGetPostVerifyingKeyPath(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:1032
func FilGetPostCircuitIdentifier(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilGetPostVersion function as declared in filecoin-ffi/filcrypto.h:1037
func FilGetPostVersion(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilDestroyVerifySealResponse function as declared in filecoin-ffi/filcrypto.h:1042
func FilDestroyVerifySealResponse(ptr *FilVerifySealResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyVerifyAggregateSealResponse function as declared in filecoin-ffi/filcrypto.h:1047
func FilDestroyVerifyAggregateSealResponse(ptr *FilVerifyAggregateSealProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_aggregate_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyFinalizeTicketResponse function as declared in filecoin-ffi/filcrypto.h:1049
func FilDestroyFinalizeTicketResponse(ptr *FilFinalizeTicketResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_finalize_ticket_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyVerifyWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:1054
func FilDestroyVerifyWinningPostResponse(ptr *FilVerifyWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyVerifyWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:1056
func FilDestroyVerifyWindowPostResponse(ptr *FilVerifyWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateFallbackSectorChallengesResponse function as declared in filecoin-ffi/filcrypto.h:1058
func FilDestroyGenerateFallbackSectorChallengesResponse(ptr *FilGenerateFallbackSectorChallengesResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_fallback_sector_challenges_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateSingleVanillaProofResponse function as declared in filecoin-ffi/filcrypto.h:1060
func FilDestroyGenerateSingleVanillaProofResponse(ptr *FilGenerateSingleVanillaProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_single_vanilla_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateSingleWindowPostWithVanillaResponse function as declared in filecoin-ffi/filcrypto.h:1062
func FilDestroyGenerateSingleWindowPostWithVanillaResponse(ptr *FilGenerateSingleWindowPoStWithVanillaResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_single_window_post_with_vanilla_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGetNumPartitionForFallbackPostResponse function as declared in filecoin-ffi/filcrypto.h:1064
func FilDestroyGetNumPartitionForFallbackPostResponse(ptr *FilGetNumPartitionForFallbackPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_get_num_partition_for_fallback_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyMergeWindowPostPartitionProofsResponse function as declared in filecoin-ffi/filcrypto.h:1066
func FilDestroyMergeWindowPostPartitionProofsResponse(ptr *FilMergeWindowPoStPartitionProofsResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_merge_window_post_partition_proofs_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:1068
func FilDestroyGenerateWinningPostResponse(ptr *FilGenerateWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:1070
func FilDestroyGenerateWindowPostResponse(ptr *FilGenerateWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:1072
func FilDestroyGenerateWinningPostSectorChallenge(ptr *FilGenerateWinningPoStSectorChallenge) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_winning_post_sector_challenge(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyClearCacheResponse function as declared in filecoin-ffi/filcrypto.h:1074
func FilDestroyClearCacheResponse(ptr *FilClearCacheResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_clear_cache_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyAggregateProof function as declared in filecoin-ffi/filcrypto.h:1079
func FilDestroyAggregateProof(ptr *FilAggregateProof) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_aggregate_proof(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyEmptySectorUpdateGenerateProofResponse function as declared in filecoin-ffi/filcrypto.h:1084
func FilDestroyEmptySectorUpdateGenerateProofResponse(ptr *FilEmptySectorUpdateProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_generate_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyEmptySectorUpdateVerifyProofResponse function as declared in filecoin-ffi/filcrypto.h:1089
func FilDestroyEmptySectorUpdateVerifyProofResponse(ptr *FilVerifyEmptySectorUpdateProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_verify_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyGenerateEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:1094
func FilDestroyGenerateEmptySectorUpdatePartitionProofResponse(ptr *FilPartitionProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_empty_sector_update_partition_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyVerifyEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:1099
func FilDestroyVerifyEmptySectorUpdatePartitionProofResponse(ptr *FilVerifyPartitionProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_empty_sector_update_partition_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyEmptySectorUpdateEncodeIntoResponse function as declared in filecoin-ffi/filcrypto.h:1104
func FilDestroyEmptySectorUpdateEncodeIntoResponse(ptr *FilEmptySectorUpdateEncodeIntoResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_encode_into_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyEmptySectorUpdateDecodeFromResponse function as declared in filecoin-ffi/filcrypto.h:1109
func FilDestroyEmptySectorUpdateDecodeFromResponse(ptr *FilEmptySectorUpdateDecodeFromResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_decode_from_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyEmptySectorUpdateRemoveEncodedDataResponse function as declared in filecoin-ffi/filcrypto.h:1114
func FilDestroyEmptySectorUpdateRemoveEncodedDataResponse(ptr *FilEmptySectorUpdateRemoveEncodedDataResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_remove_encoded_data_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilGetGpuDevices function as declared in filecoin-ffi/filcrypto.h:1119
func FilGetGpuDevices() *FilGpuDeviceResponse {
	__ret := C.fil_get_gpu_devices()
	__v := NewFilGpuDeviceResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilInitLogFd function as declared in filecoin-ffi/filcrypto.h:1130
func FilInitLogFd(logFd int32) *FilInitLogFdResponse {
	clogFd, clogFdAllocMap := (C.int)(logFd), cgoAllocsUnknown
	__ret := C.fil_init_log_fd(clogFd)
	runtime.KeepAlive(clogFdAllocMap)
	__v := NewFilInitLogFdResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilDestroyGpuDeviceResponse function as declared in filecoin-ffi/filcrypto.h:1132
func FilDestroyGpuDeviceResponse(ptr *FilGpuDeviceResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_gpu_device_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// FilDestroyInitLogFdResponse function as declared in filecoin-ffi/filcrypto.h:1134
func FilDestroyInitLogFdResponse(ptr *FilInitLogFdResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_init_log_fd_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}
