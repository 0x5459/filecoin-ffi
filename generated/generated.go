// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L${SRCDIR}/..
#cgo pkg-config: ${SRCDIR}/../filcrypto.pc
#include "../filcrypto.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// FilAggregate function as declared in filecoin-ffi/filcrypto.h:460
func FilAggregate(flattenedSignaturesPtr []byte, flattenedSignaturesLen uint) *FilAggregateResponse {
	cflattenedSignaturesPtr, cflattenedSignaturesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedSignaturesPtr)))
	cflattenedSignaturesLen, cflattenedSignaturesLenAllocMap := (C.size_t)(flattenedSignaturesLen), cgoAllocsUnknown
	__ret := C.fil_aggregate(cflattenedSignaturesPtr, cflattenedSignaturesLen)
	runtime.KeepAlive(cflattenedSignaturesLenAllocMap)
	runtime.KeepAlive(cflattenedSignaturesPtrAllocMap)
	__v := NewFilAggregateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// FilAggregateSealProofs function as declared in filecoin-ffi/filcrypto.h:463
func FilAggregateSealProofs(registeredProof FilRegisteredSealProof, registeredAggregation FilRegisteredAggregationProof, commRsPtr []Fil32ByteArray, commRsLen uint, seedsPtr []Fil32ByteArray, seedsLen uint, sealCommitResponsesPtr []FilSealCommitPhase2Response, sealCommitResponsesLen uint) *FilAggregateProof {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.fil_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	ccommRsPtr, ccommRsPtrAllocMap := unpackArgSFil32ByteArray(commRsPtr)
	ccommRsLen, ccommRsLenAllocMap := (C.size_t)(commRsLen), cgoAllocsUnknown
	cseedsPtr, cseedsPtrAllocMap := unpackArgSFil32ByteArray(seedsPtr)
	cseedsLen, cseedsLenAllocMap := (C.size_t)(seedsLen), cgoAllocsUnknown
	csealCommitResponsesPtr, csealCommitResponsesPtrAllocMap := unpackArgSFilSealCommitPhase2Response(sealCommitResponsesPtr)
	csealCommitResponsesLen, csealCommitResponsesLenAllocMap := (C.size_t)(sealCommitResponsesLen), cgoAllocsUnknown
	__ret := C.fil_aggregate_seal_proofs(cregisteredProof, cregisteredAggregation, ccommRsPtr, ccommRsLen, cseedsPtr, cseedsLen, csealCommitResponsesPtr, csealCommitResponsesLen)
	runtime.KeepAlive(csealCommitResponsesLenAllocMap)
	packSFilSealCommitPhase2Response(sealCommitResponsesPtr, csealCommitResponsesPtr)
	runtime.KeepAlive(csealCommitResponsesPtrAllocMap)
	runtime.KeepAlive(cseedsLenAllocMap)
	packSFil32ByteArray(seedsPtr, cseedsPtr)
	runtime.KeepAlive(cseedsPtrAllocMap)
	runtime.KeepAlive(ccommRsLenAllocMap)
	packSFil32ByteArray(commRsPtr, ccommRsPtr)
	runtime.KeepAlive(ccommRsPtrAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilAggregateProofRef(unsafe.Pointer(__ret))
	return __v
}

// FilClearCache function as declared in filecoin-ffi/filcrypto.h:472
func FilClearCache(sectorSize uint64, cacheDirPath string) *FilClearCacheResponse {
	csectorSize, csectorSizeAllocMap := (C.uint64_t)(sectorSize), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	__ret := C.fil_clear_cache(csectorSize, ccacheDirPath)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(csectorSizeAllocMap)
	__v := NewFilClearCacheResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilCreateFvmMachine function as declared in filecoin-ffi/filcrypto.h:472
func FilCreateFvmMachine(fvmVersion FilFvmRegisteredVersion, chainEpoch uint64, tokenAmountHi uint64, tokenAmountLo uint64, baseCircSupplyHi uint64, baseCircSupplyLo uint64, networkVersion uint64, stateRootPtr []byte, stateRootLen uint, blockstoreId uint64, externsId uint64) *FilCreateFvmMachineResponse {
	cfvmVersion, cfvmVersionAllocMap := (C.fil_FvmRegisteredVersion)(fvmVersion), cgoAllocsUnknown
	cchainEpoch, cchainEpochAllocMap := (C.uint64_t)(chainEpoch), cgoAllocsUnknown
	ctokenAmountHi, ctokenAmountHiAllocMap := (C.uint64_t)(tokenAmountHi), cgoAllocsUnknown
	ctokenAmountLo, ctokenAmountLoAllocMap := (C.uint64_t)(tokenAmountLo), cgoAllocsUnknown
=======
// FilCreateFvmMachine function as declared in filecoin-ffi/filcrypto.h:480
func FilCreateFvmMachine(fvmVersion FilFvmRegisteredVersion, chainEpoch uint64, baseFeeHi uint64, baseFeeLo uint64, baseCircSupplyHi uint64, baseCircSupplyLo uint64, networkVersion uint64, stateRootPtr []byte, stateRootLen uint, blockstoreId uint64, externsId uint64) *FilCreateFvmMachineResponse {
	cfvmVersion, cfvmVersionAllocMap := (C.fil_FvmRegisteredVersion)(fvmVersion), cgoAllocsUnknown
	cchainEpoch, cchainEpochAllocMap := (C.uint64_t)(chainEpoch), cgoAllocsUnknown
	cbaseFeeHi, cbaseFeeHiAllocMap := (C.uint64_t)(baseFeeHi), cgoAllocsUnknown
	cbaseFeeLo, cbaseFeeLoAllocMap := (C.uint64_t)(baseFeeLo), cgoAllocsUnknown
>>>>>>> 05ee60b (temp)
	cbaseCircSupplyHi, cbaseCircSupplyHiAllocMap := (C.uint64_t)(baseCircSupplyHi), cgoAllocsUnknown
	cbaseCircSupplyLo, cbaseCircSupplyLoAllocMap := (C.uint64_t)(baseCircSupplyLo), cgoAllocsUnknown
	cnetworkVersion, cnetworkVersionAllocMap := (C.uint64_t)(networkVersion), cgoAllocsUnknown
	cstateRootPtr, cstateRootPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&stateRootPtr)))
	cstateRootLen, cstateRootLenAllocMap := (C.size_t)(stateRootLen), cgoAllocsUnknown
	cblockstoreId, cblockstoreIdAllocMap := (C.uint64_t)(blockstoreId), cgoAllocsUnknown
	cexternsId, cexternsIdAllocMap := (C.uint64_t)(externsId), cgoAllocsUnknown
<<<<<<< HEAD
	__ret := C.fil_create_fvm_machine(cfvmVersion, cchainEpoch, ctokenAmountHi, ctokenAmountLo, cbaseCircSupplyHi, cbaseCircSupplyLo, cnetworkVersion, cstateRootPtr, cstateRootLen, cblockstoreId, cexternsId)
=======
	__ret := C.fil_create_fvm_machine(cfvmVersion, cchainEpoch, cbaseFeeHi, cbaseFeeLo, cbaseCircSupplyHi, cbaseCircSupplyLo, cnetworkVersion, cstateRootPtr, cstateRootLen, cblockstoreId, cexternsId)
>>>>>>> 05ee60b (temp)
	runtime.KeepAlive(cexternsIdAllocMap)
	runtime.KeepAlive(cblockstoreIdAllocMap)
	runtime.KeepAlive(cstateRootLenAllocMap)
	runtime.KeepAlive(cstateRootPtrAllocMap)
	runtime.KeepAlive(cnetworkVersionAllocMap)
	runtime.KeepAlive(cbaseCircSupplyLoAllocMap)
	runtime.KeepAlive(cbaseCircSupplyHiAllocMap)
<<<<<<< HEAD
	runtime.KeepAlive(ctokenAmountLoAllocMap)
	runtime.KeepAlive(ctokenAmountHiAllocMap)
=======
	runtime.KeepAlive(cbaseFeeLoAllocMap)
	runtime.KeepAlive(cbaseFeeHiAllocMap)
>>>>>>> 05ee60b (temp)
	runtime.KeepAlive(cchainEpochAllocMap)
	runtime.KeepAlive(cfvmVersionAllocMap)
	__v := NewFilCreateFvmMachineResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilCreateZeroSignature function as declared in filecoin-ffi/filcrypto.h:489
=======
// FilCreateZeroSignature function as declared in filecoin-ffi/filcrypto.h:497
>>>>>>> 05ee60b (temp)
func FilCreateZeroSignature() *FilZeroSignatureResponse {
	__ret := C.fil_create_zero_signature()
	__v := NewFilZeroSignatureResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilDestroyAggregateProof function as declared in filecoin-ffi/filcrypto.h:495
=======
// FilDestroyAggregateProof function as declared in filecoin-ffi/filcrypto.h:503
>>>>>>> 05ee60b (temp)
func FilDestroyAggregateProof(ptr *FilAggregateProof) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_aggregate_proof(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyAggregateResponse function as declared in filecoin-ffi/filcrypto.h:497
=======
// FilDestroyAggregateResponse function as declared in filecoin-ffi/filcrypto.h:505
>>>>>>> 05ee60b (temp)
func FilDestroyAggregateResponse(ptr *FilAggregateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_aggregate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyClearCacheResponse function as declared in filecoin-ffi/filcrypto.h:499
=======
// FilDestroyClearCacheResponse function as declared in filecoin-ffi/filcrypto.h:507
>>>>>>> 05ee60b (temp)
func FilDestroyClearCacheResponse(ptr *FilClearCacheResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_clear_cache_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyCreateFvmMachineResponse function as declared in filecoin-ffi/filcrypto.h:501
=======
// FilDestroyCreateFvmMachineResponse function as declared in filecoin-ffi/filcrypto.h:509
>>>>>>> 05ee60b (temp)
func FilDestroyCreateFvmMachineResponse(ptr *FilCreateFvmMachineResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_create_fvm_machine_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyDropFvmMachineResponse function as declared in filecoin-ffi/filcrypto.h:503
=======
// FilDestroyDropFvmMachineResponse function as declared in filecoin-ffi/filcrypto.h:511
>>>>>>> 05ee60b (temp)
func FilDestroyDropFvmMachineResponse(ptr *FilDropFvmMachineResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_drop_fvm_machine_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyEmptySectorUpdateDecodeFromResponse function as declared in filecoin-ffi/filcrypto.h:509
=======
// FilDestroyEmptySectorUpdateDecodeFromResponse function as declared in filecoin-ffi/filcrypto.h:517
>>>>>>> 05ee60b (temp)
func FilDestroyEmptySectorUpdateDecodeFromResponse(ptr *FilEmptySectorUpdateDecodeFromResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_decode_from_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyEmptySectorUpdateEncodeIntoResponse function as declared in filecoin-ffi/filcrypto.h:515
=======
// FilDestroyEmptySectorUpdateEncodeIntoResponse function as declared in filecoin-ffi/filcrypto.h:523
>>>>>>> 05ee60b (temp)
func FilDestroyEmptySectorUpdateEncodeIntoResponse(ptr *FilEmptySectorUpdateEncodeIntoResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_encode_into_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyEmptySectorUpdateGenerateProofResponse function as declared in filecoin-ffi/filcrypto.h:521
=======
// FilDestroyEmptySectorUpdateGenerateProofResponse function as declared in filecoin-ffi/filcrypto.h:529
>>>>>>> 05ee60b (temp)
func FilDestroyEmptySectorUpdateGenerateProofResponse(ptr *FilEmptySectorUpdateProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_generate_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyEmptySectorUpdateRemoveEncodedDataResponse function as declared in filecoin-ffi/filcrypto.h:527
=======
// FilDestroyEmptySectorUpdateRemoveEncodedDataResponse function as declared in filecoin-ffi/filcrypto.h:535
>>>>>>> 05ee60b (temp)
func FilDestroyEmptySectorUpdateRemoveEncodedDataResponse(ptr *FilEmptySectorUpdateRemoveEncodedDataResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_remove_encoded_data_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyEmptySectorUpdateVerifyProofResponse function as declared in filecoin-ffi/filcrypto.h:533
=======
// FilDestroyEmptySectorUpdateVerifyProofResponse function as declared in filecoin-ffi/filcrypto.h:541
>>>>>>> 05ee60b (temp)
func FilDestroyEmptySectorUpdateVerifyProofResponse(ptr *FilVerifyEmptySectorUpdateProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_empty_sector_update_verify_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyFauxrepResponse function as declared in filecoin-ffi/filcrypto.h:535
=======
// FilDestroyFauxrepResponse function as declared in filecoin-ffi/filcrypto.h:543
>>>>>>> 05ee60b (temp)
func FilDestroyFauxrepResponse(ptr *FilFauxRepResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_fauxrep_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyFinalizeTicketResponse function as declared in filecoin-ffi/filcrypto.h:537
=======
// FilDestroyFinalizeTicketResponse function as declared in filecoin-ffi/filcrypto.h:545
>>>>>>> 05ee60b (temp)
func FilDestroyFinalizeTicketResponse(ptr *FilFinalizeTicketResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_finalize_ticket_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyFvmMachineExecuteResponse function as declared in filecoin-ffi/filcrypto.h:539
=======
// FilDestroyFvmMachineExecuteResponse function as declared in filecoin-ffi/filcrypto.h:547
>>>>>>> 05ee60b (temp)
func FilDestroyFvmMachineExecuteResponse(ptr *FilFvmMachineExecuteResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_fvm_machine_execute_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateDataCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:541
=======
// FilDestroyGenerateDataCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:549
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateDataCommitmentResponse(ptr *FilGenerateDataCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_data_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:547
=======
// FilDestroyGenerateEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:555
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateEmptySectorUpdatePartitionProofResponse(ptr *FilPartitionProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_empty_sector_update_partition_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateFallbackSectorChallengesResponse function as declared in filecoin-ffi/filcrypto.h:549
=======
// FilDestroyGenerateFallbackSectorChallengesResponse function as declared in filecoin-ffi/filcrypto.h:557
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateFallbackSectorChallengesResponse(ptr *FilGenerateFallbackSectorChallengesResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_fallback_sector_challenges_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGeneratePieceCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:551
=======
// FilDestroyGeneratePieceCommitmentResponse function as declared in filecoin-ffi/filcrypto.h:559
>>>>>>> 05ee60b (temp)
func FilDestroyGeneratePieceCommitmentResponse(ptr *FilGeneratePieceCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_piece_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateSingleVanillaProofResponse function as declared in filecoin-ffi/filcrypto.h:553
=======
// FilDestroyGenerateSingleVanillaProofResponse function as declared in filecoin-ffi/filcrypto.h:561
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateSingleVanillaProofResponse(ptr *FilGenerateSingleVanillaProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_single_vanilla_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateSingleWindowPostWithVanillaResponse function as declared in filecoin-ffi/filcrypto.h:555
=======
// FilDestroyGenerateSingleWindowPostWithVanillaResponse function as declared in filecoin-ffi/filcrypto.h:563
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateSingleWindowPostWithVanillaResponse(ptr *FilGenerateSingleWindowPoStWithVanillaResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_single_window_post_with_vanilla_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:557
=======
// FilDestroyGenerateWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:565
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateWindowPostResponse(ptr *FilGenerateWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:559
=======
// FilDestroyGenerateWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:567
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateWinningPostResponse(ptr *FilGenerateWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:561
=======
// FilDestroyGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:569
>>>>>>> 05ee60b (temp)
func FilDestroyGenerateWinningPostSectorChallenge(ptr *FilGenerateWinningPoStSectorChallenge) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_generate_winning_post_sector_challenge(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGetNumPartitionForFallbackPostResponse function as declared in filecoin-ffi/filcrypto.h:563
=======
// FilDestroyGetNumPartitionForFallbackPostResponse function as declared in filecoin-ffi/filcrypto.h:571
>>>>>>> 05ee60b (temp)
func FilDestroyGetNumPartitionForFallbackPostResponse(ptr *FilGetNumPartitionForFallbackPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_get_num_partition_for_fallback_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyGpuDeviceResponse function as declared in filecoin-ffi/filcrypto.h:565
=======
// FilDestroyGpuDeviceResponse function as declared in filecoin-ffi/filcrypto.h:573
>>>>>>> 05ee60b (temp)
func FilDestroyGpuDeviceResponse(ptr *FilGpuDeviceResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_gpu_device_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyHashResponse function as declared in filecoin-ffi/filcrypto.h:567
=======
// FilDestroyHashResponse function as declared in filecoin-ffi/filcrypto.h:575
>>>>>>> 05ee60b (temp)
func FilDestroyHashResponse(ptr *FilHashResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_hash_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyInitLogFdResponse function as declared in filecoin-ffi/filcrypto.h:569
=======
// FilDestroyInitLogFdResponse function as declared in filecoin-ffi/filcrypto.h:577
>>>>>>> 05ee60b (temp)
func FilDestroyInitLogFdResponse(ptr *FilInitLogFdResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_init_log_fd_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyMergeWindowPostPartitionProofsResponse function as declared in filecoin-ffi/filcrypto.h:571
=======
// FilDestroyMergeWindowPostPartitionProofsResponse function as declared in filecoin-ffi/filcrypto.h:579
>>>>>>> 05ee60b (temp)
func FilDestroyMergeWindowPostPartitionProofsResponse(ptr *FilMergeWindowPoStPartitionProofsResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_merge_window_post_partition_proofs_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyPrivateKeyGenerateResponse function as declared in filecoin-ffi/filcrypto.h:573
=======
// FilDestroyPrivateKeyGenerateResponse function as declared in filecoin-ffi/filcrypto.h:581
>>>>>>> 05ee60b (temp)
func FilDestroyPrivateKeyGenerateResponse(ptr *FilPrivateKeyGenerateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_generate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyPrivateKeyPublicKeyResponse function as declared in filecoin-ffi/filcrypto.h:575
=======
// FilDestroyPrivateKeyPublicKeyResponse function as declared in filecoin-ffi/filcrypto.h:583
>>>>>>> 05ee60b (temp)
func FilDestroyPrivateKeyPublicKeyResponse(ptr *FilPrivateKeyPublicKeyResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_public_key_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyPrivateKeySignResponse function as declared in filecoin-ffi/filcrypto.h:577
=======
// FilDestroyPrivateKeySignResponse function as declared in filecoin-ffi/filcrypto.h:585
>>>>>>> 05ee60b (temp)
func FilDestroyPrivateKeySignResponse(ptr *FilPrivateKeySignResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_private_key_sign_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroySealCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:579
=======
// FilDestroySealCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:587
>>>>>>> 05ee60b (temp)
func FilDestroySealCommitPhase1Response(ptr *FilSealCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroySealCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:581
=======
// FilDestroySealCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:589
>>>>>>> 05ee60b (temp)
func FilDestroySealCommitPhase2Response(ptr *FilSealCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroySealPreCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:583
=======
// FilDestroySealPreCommitPhase1Response function as declared in filecoin-ffi/filcrypto.h:591
>>>>>>> 05ee60b (temp)
func FilDestroySealPreCommitPhase1Response(ptr *FilSealPreCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_pre_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroySealPreCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:585
=======
// FilDestroySealPreCommitPhase2Response function as declared in filecoin-ffi/filcrypto.h:593
>>>>>>> 05ee60b (temp)
func FilDestroySealPreCommitPhase2Response(ptr *FilSealPreCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_seal_pre_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyStringResponse function as declared in filecoin-ffi/filcrypto.h:587
=======
// FilDestroyStringResponse function as declared in filecoin-ffi/filcrypto.h:595
>>>>>>> 05ee60b (temp)
func FilDestroyStringResponse(ptr *FilStringResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_string_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyUnsealRangeResponse function as declared in filecoin-ffi/filcrypto.h:589
=======
// FilDestroyUnsealRangeResponse function as declared in filecoin-ffi/filcrypto.h:597
>>>>>>> 05ee60b (temp)
func FilDestroyUnsealRangeResponse(ptr *FilUnsealRangeResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_unseal_range_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyVerifyAggregateSealResponse function as declared in filecoin-ffi/filcrypto.h:595
=======
// FilDestroyVerifyAggregateSealResponse function as declared in filecoin-ffi/filcrypto.h:603
>>>>>>> 05ee60b (temp)
func FilDestroyVerifyAggregateSealResponse(ptr *FilVerifyAggregateSealProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_aggregate_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyVerifyEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:601
=======
// FilDestroyVerifyEmptySectorUpdatePartitionProofResponse function as declared in filecoin-ffi/filcrypto.h:609
>>>>>>> 05ee60b (temp)
func FilDestroyVerifyEmptySectorUpdatePartitionProofResponse(ptr *FilVerifyPartitionProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_empty_sector_update_partition_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyVerifySealResponse function as declared in filecoin-ffi/filcrypto.h:607
=======
// FilDestroyVerifySealResponse function as declared in filecoin-ffi/filcrypto.h:615
>>>>>>> 05ee60b (temp)
func FilDestroyVerifySealResponse(ptr *FilVerifySealResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyVerifyWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:609
=======
// FilDestroyVerifyWindowPostResponse function as declared in filecoin-ffi/filcrypto.h:617
>>>>>>> 05ee60b (temp)
func FilDestroyVerifyWindowPostResponse(ptr *FilVerifyWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyVerifyWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:615
=======
// FilDestroyVerifyWinningPostResponse function as declared in filecoin-ffi/filcrypto.h:623
>>>>>>> 05ee60b (temp)
func FilDestroyVerifyWinningPostResponse(ptr *FilVerifyWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_verify_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyWriteWithAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:617
=======
// FilDestroyWriteWithAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:625
>>>>>>> 05ee60b (temp)
func FilDestroyWriteWithAlignmentResponse(ptr *FilWriteWithAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_write_with_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyWriteWithoutAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:619
=======
// FilDestroyWriteWithoutAlignmentResponse function as declared in filecoin-ffi/filcrypto.h:627
>>>>>>> 05ee60b (temp)
func FilDestroyWriteWithoutAlignmentResponse(ptr *FilWriteWithoutAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_write_without_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDestroyZeroSignatureResponse function as declared in filecoin-ffi/filcrypto.h:621
=======
// FilDestroyZeroSignatureResponse function as declared in filecoin-ffi/filcrypto.h:629
>>>>>>> 05ee60b (temp)
func FilDestroyZeroSignatureResponse(ptr *FilZeroSignatureResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.fil_destroy_zero_signature_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

<<<<<<< HEAD
// FilDropFvmMachine function as declared in filecoin-ffi/filcrypto.h:623
=======
// FilDropFvmMachine function as declared in filecoin-ffi/filcrypto.h:631
>>>>>>> 05ee60b (temp)
func FilDropFvmMachine(machineId uint64) *FilDropFvmMachineResponse {
	cmachineId, cmachineIdAllocMap := (C.uint64_t)(machineId), cgoAllocsUnknown
	__ret := C.fil_drop_fvm_machine(cmachineId)
	runtime.KeepAlive(cmachineIdAllocMap)
	__v := NewFilDropFvmMachineResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilDropSignature function as declared in filecoin-ffi/filcrypto.h:628
=======
// FilDropSignature function as declared in filecoin-ffi/filcrypto.h:636
>>>>>>> 05ee60b (temp)
func FilDropSignature(sig []byte) {
	csig, csigAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sig)))
	C.fil_drop_signature(csig)
	runtime.KeepAlive(csigAllocMap)
}

<<<<<<< HEAD
// FilEmptySectorUpdateDecodeFrom function as declared in filecoin-ffi/filcrypto.h:634
=======
// FilEmptySectorUpdateDecodeFrom function as declared in filecoin-ffi/filcrypto.h:642
>>>>>>> 05ee60b (temp)
func FilEmptySectorUpdateDecodeFrom(registeredProof FilRegisteredUpdateProof, outDataPath string, replicaPath string, sectorKeyPath string, sectorKeyCacheDirPath string, commDNew Fil32ByteArray) *FilEmptySectorUpdateDecodeFromResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	outDataPath = safeString(outDataPath)
	coutDataPath, coutDataPathAllocMap := unpackPCharString(outDataPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	sectorKeyPath = safeString(sectorKeyPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackPCharString(sectorKeyPath)
	sectorKeyCacheDirPath = safeString(sectorKeyCacheDirPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackPCharString(sectorKeyCacheDirPath)
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_empty_sector_update_decode_from(cregisteredProof, coutDataPath, creplicaPath, csectorKeyPath, csectorKeyCacheDirPath, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(sectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	runtime.KeepAlive(sectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(outDataPath)
	runtime.KeepAlive(coutDataPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateDecodeFromResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilEmptySectorUpdateEncodeInto function as declared in filecoin-ffi/filcrypto.h:645
=======
// FilEmptySectorUpdateEncodeInto function as declared in filecoin-ffi/filcrypto.h:653
>>>>>>> 05ee60b (temp)
func FilEmptySectorUpdateEncodeInto(registeredProof FilRegisteredUpdateProof, newReplicaPath string, newCacheDirPath string, sectorKeyPath string, sectorKeyCacheDirPath string, stagedDataPath string, piecesPtr []FilPublicPieceInfo, piecesLen uint) *FilEmptySectorUpdateEncodeIntoResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	newReplicaPath = safeString(newReplicaPath)
	cnewReplicaPath, cnewReplicaPathAllocMap := unpackPCharString(newReplicaPath)
	newCacheDirPath = safeString(newCacheDirPath)
	cnewCacheDirPath, cnewCacheDirPathAllocMap := unpackPCharString(newCacheDirPath)
	sectorKeyPath = safeString(sectorKeyPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackPCharString(sectorKeyPath)
	sectorKeyCacheDirPath = safeString(sectorKeyCacheDirPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackPCharString(sectorKeyCacheDirPath)
	stagedDataPath = safeString(stagedDataPath)
	cstagedDataPath, cstagedDataPathAllocMap := unpackPCharString(stagedDataPath)
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSFilPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.fil_empty_sector_update_encode_into(cregisteredProof, cnewReplicaPath, cnewCacheDirPath, csectorKeyPath, csectorKeyCacheDirPath, cstagedDataPath, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSFilPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(stagedDataPath)
	runtime.KeepAlive(cstagedDataPathAllocMap)
	runtime.KeepAlive(sectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	runtime.KeepAlive(sectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(newCacheDirPath)
	runtime.KeepAlive(cnewCacheDirPathAllocMap)
	runtime.KeepAlive(newReplicaPath)
	runtime.KeepAlive(cnewReplicaPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateEncodeIntoResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilEmptySectorUpdateRemoveEncodedData function as declared in filecoin-ffi/filcrypto.h:658
=======
// FilEmptySectorUpdateRemoveEncodedData function as declared in filecoin-ffi/filcrypto.h:666
>>>>>>> 05ee60b (temp)
func FilEmptySectorUpdateRemoveEncodedData(registeredProof FilRegisteredUpdateProof, sectorKeyPath string, sectorKeyCacheDirPath string, replicaPath string, replicaCachePath string, dataPath string, commDNew Fil32ByteArray) *FilEmptySectorUpdateRemoveEncodedDataResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	sectorKeyPath = safeString(sectorKeyPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackPCharString(sectorKeyPath)
	sectorKeyCacheDirPath = safeString(sectorKeyCacheDirPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackPCharString(sectorKeyCacheDirPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	replicaCachePath = safeString(replicaCachePath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackPCharString(replicaCachePath)
	dataPath = safeString(dataPath)
	cdataPath, cdataPathAllocMap := unpackPCharString(dataPath)
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_empty_sector_update_remove_encoded_data(cregisteredProof, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath, cdataPath, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(dataPath)
	runtime.KeepAlive(cdataPathAllocMap)
	runtime.KeepAlive(replicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(sectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	runtime.KeepAlive(sectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateRemoveEncodedDataResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilFauxrep function as declared in filecoin-ffi/filcrypto.h:666
=======
// FilFauxrep function as declared in filecoin-ffi/filcrypto.h:674
>>>>>>> 05ee60b (temp)
func FilFauxrep(registeredProof FilRegisteredSealProof, cacheDirPath string, sealedSectorPath string) *FilFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	__ret := C.fil_fauxrep(cregisteredProof, ccacheDirPath, csealedSectorPath)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilFauxrep2 function as declared in filecoin-ffi/filcrypto.h:670
=======
// FilFauxrep2 function as declared in filecoin-ffi/filcrypto.h:678
>>>>>>> 05ee60b (temp)
func FilFauxrep2(registeredProof FilRegisteredSealProof, cacheDirPath string, existingPAuxPath string) *FilFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	existingPAuxPath = safeString(existingPAuxPath)
	cexistingPAuxPath, cexistingPAuxPathAllocMap := unpackPCharString(existingPAuxPath)
	__ret := C.fil_fauxrep2(cregisteredProof, ccacheDirPath, cexistingPAuxPath)
	runtime.KeepAlive(existingPAuxPath)
	runtime.KeepAlive(cexistingPAuxPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilFvmMachineExecuteMessage function as declared in filecoin-ffi/filcrypto.h:674
=======
// FilFvmMachineExecuteMessage function as declared in filecoin-ffi/filcrypto.h:682
>>>>>>> 05ee60b (temp)
func FilFvmMachineExecuteMessage(machineId uint64, messagePtr []byte, messageLen uint, applyKind uint64) *FilFvmMachineExecuteResponse {
	cmachineId, cmachineIdAllocMap := (C.uint64_t)(machineId), cgoAllocsUnknown
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	capplyKind, capplyKindAllocMap := (C.uint64_t)(applyKind), cgoAllocsUnknown
	__ret := C.fil_fvm_machine_execute_message(cmachineId, cmessagePtr, cmessageLen, capplyKind)
	runtime.KeepAlive(capplyKindAllocMap)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	runtime.KeepAlive(cmachineIdAllocMap)
	__v := NewFilFvmMachineExecuteResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilFvmMachineFinishMessage function as declared in filecoin-ffi/filcrypto.h:679
=======
// FilFvmMachineFinishMessage function as declared in filecoin-ffi/filcrypto.h:687
>>>>>>> 05ee60b (temp)
func FilFvmMachineFinishMessage(machineId uint64) {
	cmachineId, cmachineIdAllocMap := (C.uint64_t)(machineId), cgoAllocsUnknown
	C.fil_fvm_machine_finish_message(cmachineId)
	runtime.KeepAlive(cmachineIdAllocMap)
}

<<<<<<< HEAD
// FilGenerateDataCommitment function as declared in filecoin-ffi/filcrypto.h:684
=======
// FilGenerateDataCommitment function as declared in filecoin-ffi/filcrypto.h:692
>>>>>>> 05ee60b (temp)
func FilGenerateDataCommitment(registeredProof FilRegisteredSealProof, piecesPtr []FilPublicPieceInfo, piecesLen uint) *FilGenerateDataCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSFilPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.fil_generate_data_commitment(cregisteredProof, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSFilPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateDataCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:692
=======
// FilGenerateEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:700
>>>>>>> 05ee60b (temp)
func FilGenerateEmptySectorUpdatePartitionProofs(registeredProof FilRegisteredUpdateProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray, sectorKeyPath string, sectorKeyCacheDirPath string, replicaPath string, replicaCachePath string) *FilPartitionProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	sectorKeyPath = safeString(sectorKeyPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackPCharString(sectorKeyPath)
	sectorKeyCacheDirPath = safeString(sectorKeyCacheDirPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackPCharString(sectorKeyCacheDirPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	replicaCachePath = safeString(replicaCachePath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackPCharString(replicaCachePath)
	__ret := C.fil_generate_empty_sector_update_partition_proofs(cregisteredProof, ccommROld, ccommRNew, ccommDNew, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath)
	runtime.KeepAlive(replicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(sectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	runtime.KeepAlive(sectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilPartitionProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:705
=======
// FilGenerateEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:713
>>>>>>> 05ee60b (temp)
func FilGenerateEmptySectorUpdateProof(registeredProof FilRegisteredUpdateProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray, sectorKeyPath string, sectorKeyCacheDirPath string, replicaPath string, replicaCachePath string) *FilEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	sectorKeyPath = safeString(sectorKeyPath)
	csectorKeyPath, csectorKeyPathAllocMap := unpackPCharString(sectorKeyPath)
	sectorKeyCacheDirPath = safeString(sectorKeyCacheDirPath)
	csectorKeyCacheDirPath, csectorKeyCacheDirPathAllocMap := unpackPCharString(sectorKeyCacheDirPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	replicaCachePath = safeString(replicaCachePath)
	creplicaCachePath, creplicaCachePathAllocMap := unpackPCharString(replicaCachePath)
	__ret := C.fil_generate_empty_sector_update_proof(cregisteredProof, ccommROld, ccommRNew, ccommDNew, csectorKeyPath, csectorKeyCacheDirPath, creplicaPath, creplicaCachePath)
	runtime.KeepAlive(replicaCachePath)
	runtime.KeepAlive(creplicaCachePathAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(sectorKeyCacheDirPath)
	runtime.KeepAlive(csectorKeyCacheDirPathAllocMap)
	runtime.KeepAlive(sectorKeyPath)
	runtime.KeepAlive(csectorKeyPathAllocMap)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateEmptySectorUpdateProofWithVanilla function as declared in filecoin-ffi/filcrypto.h:718
=======
// FilGenerateEmptySectorUpdateProofWithVanilla function as declared in filecoin-ffi/filcrypto.h:726
>>>>>>> 05ee60b (temp)
func FilGenerateEmptySectorUpdateProofWithVanilla(registeredProof FilRegisteredUpdateProof, vanillaProofsPtr []FilPartitionProof, vanillaProofsLen uint, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSFilPartitionProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_generate_empty_sector_update_proof_with_vanilla(cregisteredProof, cvanillaProofsPtr, cvanillaProofsLen, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSFilPartitionProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateFallbackSectorChallenges function as declared in filecoin-ffi/filcrypto.h:729
=======
// FilGenerateFallbackSectorChallenges function as declared in filecoin-ffi/filcrypto.h:737
>>>>>>> 05ee60b (temp)
func FilGenerateFallbackSectorChallenges(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, sectorIdsPtr []uint64, sectorIdsLen uint, proverId Fil32ByteArray) *FilGenerateFallbackSectorChallengesResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorIdsPtr, csectorIdsPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&sectorIdsPtr)))
	csectorIdsLen, csectorIdsLenAllocMap := (C.size_t)(sectorIdsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_fallback_sector_challenges(cregisteredProof, crandomness, csectorIdsPtr, csectorIdsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdsLenAllocMap)
	runtime.KeepAlive(csectorIdsPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateFallbackSectorChallengesResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGeneratePieceCommitment function as declared in filecoin-ffi/filcrypto.h:739
=======
// FilGeneratePieceCommitment function as declared in filecoin-ffi/filcrypto.h:747
>>>>>>> 05ee60b (temp)
func FilGeneratePieceCommitment(registeredProof FilRegisteredSealProof, pieceFdRaw int32, unpaddedPieceSize uint64) *FilGeneratePieceCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpieceFdRaw, cpieceFdRawAllocMap := (C.int)(pieceFdRaw), cgoAllocsUnknown
	cunpaddedPieceSize, cunpaddedPieceSizeAllocMap := (C.uint64_t)(unpaddedPieceSize), cgoAllocsUnknown
	__ret := C.fil_generate_piece_commitment(cregisteredProof, cpieceFdRaw, cunpaddedPieceSize)
	runtime.KeepAlive(cunpaddedPieceSizeAllocMap)
	runtime.KeepAlive(cpieceFdRawAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGeneratePieceCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateSingleVanillaProof function as declared in filecoin-ffi/filcrypto.h:747
=======
// FilGenerateSingleVanillaProof function as declared in filecoin-ffi/filcrypto.h:755
>>>>>>> 05ee60b (temp)
func FilGenerateSingleVanillaProof(replica FilPrivateReplicaInfo, challengesPtr []uint64, challengesLen uint) *FilGenerateSingleVanillaProofResponse {
	creplica, creplicaAllocMap := replica.PassValue()
	cchallengesPtr, cchallengesPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&challengesPtr)))
	cchallengesLen, cchallengesLenAllocMap := (C.size_t)(challengesLen), cgoAllocsUnknown
	__ret := C.fil_generate_single_vanilla_proof(creplica, cchallengesPtr, cchallengesLen)
	runtime.KeepAlive(cchallengesLenAllocMap)
	runtime.KeepAlive(cchallengesPtrAllocMap)
	runtime.KeepAlive(creplicaAllocMap)
	__v := NewFilGenerateSingleVanillaProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateSingleWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:755
=======
// FilGenerateSingleWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:763
>>>>>>> 05ee60b (temp)
func FilGenerateSingleWindowPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofsPtr []FilVanillaProof, vanillaProofsLen uint, partitionIndex uint) *FilGenerateSingleWindowPoStWithVanillaResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSFilVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	cpartitionIndex, cpartitionIndexAllocMap := (C.size_t)(partitionIndex), cgoAllocsUnknown
	__ret := C.fil_generate_single_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen, cpartitionIndex)
	runtime.KeepAlive(cpartitionIndexAllocMap)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSFilVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateSingleWindowPoStWithVanillaResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateWindowPost function as declared in filecoin-ffi/filcrypto.h:766
=======
// FilGenerateWindowPost function as declared in filecoin-ffi/filcrypto.h:774
>>>>>>> 05ee60b (temp)
func FilGenerateWindowPost(randomness Fil32ByteArray, replicasPtr []FilPrivateReplicaInfo, replicasLen uint, proverId Fil32ByteArray) *FilGenerateWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSFilPrivateReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_window_post(crandomness, creplicasPtr, creplicasLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSFilPrivateReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:775
=======
// FilGenerateWindowPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:783
>>>>>>> 05ee60b (temp)
func FilGenerateWindowPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofsPtr []FilVanillaProof, vanillaProofsLen uint) *FilGenerateWindowPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSFilVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	__ret := C.fil_generate_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSFilVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateWinningPost function as declared in filecoin-ffi/filcrypto.h:785
=======
// FilGenerateWinningPost function as declared in filecoin-ffi/filcrypto.h:793
>>>>>>> 05ee60b (temp)
func FilGenerateWinningPost(randomness Fil32ByteArray, replicasPtr []FilPrivateReplicaInfo, replicasLen uint, proverId Fil32ByteArray) *FilGenerateWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSFilPrivateReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_winning_post(crandomness, creplicasPtr, creplicasLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSFilPrivateReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:794
=======
// FilGenerateWinningPostSectorChallenge function as declared in filecoin-ffi/filcrypto.h:802
>>>>>>> 05ee60b (temp)
func FilGenerateWinningPostSectorChallenge(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, sectorSetLen uint64, proverId Fil32ByteArray) *FilGenerateWinningPoStSectorChallenge {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorSetLen, csectorSetLenAllocMap := (C.uint64_t)(sectorSetLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_generate_winning_post_sector_challenge(cregisteredProof, crandomness, csectorSetLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorSetLenAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWinningPoStSectorChallengeRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGenerateWinningPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:803
=======
// FilGenerateWinningPostWithVanilla function as declared in filecoin-ffi/filcrypto.h:811
>>>>>>> 05ee60b (temp)
func FilGenerateWinningPostWithVanilla(registeredProof FilRegisteredPoStProof, randomness Fil32ByteArray, proverId Fil32ByteArray, vanillaProofsPtr []FilVanillaProof, vanillaProofsLen uint) *FilGenerateWinningPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSFilVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	__ret := C.fil_generate_winning_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSFilVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetGpuDevices function as declared in filecoin-ffi/filcrypto.h:812
=======
// FilGetGpuDevices function as declared in filecoin-ffi/filcrypto.h:820
>>>>>>> 05ee60b (temp)
func FilGetGpuDevices() *FilGpuDeviceResponse {
	__ret := C.fil_get_gpu_devices()
	__v := NewFilGpuDeviceResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetMaxUserBytesPerStagedSector function as declared in filecoin-ffi/filcrypto.h:818
=======
// FilGetMaxUserBytesPerStagedSector function as declared in filecoin-ffi/filcrypto.h:826
>>>>>>> 05ee60b (temp)
func FilGetMaxUserBytesPerStagedSector(registeredProof FilRegisteredSealProof) uint64 {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_max_user_bytes_per_staged_sector(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := (uint64)(__ret)
	return __v
}

<<<<<<< HEAD
// FilGetNumPartitionForFallbackPost function as declared in filecoin-ffi/filcrypto.h:824
=======
// FilGetNumPartitionForFallbackPost function as declared in filecoin-ffi/filcrypto.h:832
>>>>>>> 05ee60b (temp)
func FilGetNumPartitionForFallbackPost(registeredProof FilRegisteredPoStProof, numSectors uint) *FilGetNumPartitionForFallbackPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cnumSectors, cnumSectorsAllocMap := (C.size_t)(numSectors), cgoAllocsUnknown
	__ret := C.fil_get_num_partition_for_fallback_post(cregisteredProof, cnumSectors)
	runtime.KeepAlive(cnumSectorsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilGetNumPartitionForFallbackPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:831
=======
// FilGetPostCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:839
>>>>>>> 05ee60b (temp)
func FilGetPostCircuitIdentifier(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostParamsCid function as declared in filecoin-ffi/filcrypto.h:837
=======
// FilGetPostParamsCid function as declared in filecoin-ffi/filcrypto.h:845
>>>>>>> 05ee60b (temp)
func FilGetPostParamsCid(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostParamsPath function as declared in filecoin-ffi/filcrypto.h:844
=======
// FilGetPostParamsPath function as declared in filecoin-ffi/filcrypto.h:852
>>>>>>> 05ee60b (temp)
func FilGetPostParamsPath(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:850
=======
// FilGetPostVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:858
>>>>>>> 05ee60b (temp)
func FilGetPostVerifyingKeyCid(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:857
=======
// FilGetPostVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:865
>>>>>>> 05ee60b (temp)
func FilGetPostVerifyingKeyPath(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetPostVersion function as declared in filecoin-ffi/filcrypto.h:863
=======
// FilGetPostVersion function as declared in filecoin-ffi/filcrypto.h:871
>>>>>>> 05ee60b (temp)
func FilGetPostVersion(registeredProof FilRegisteredPoStProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_post_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:869
=======
// FilGetSealCircuitIdentifier function as declared in filecoin-ffi/filcrypto.h:877
>>>>>>> 05ee60b (temp)
func FilGetSealCircuitIdentifier(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealParamsCid function as declared in filecoin-ffi/filcrypto.h:875
=======
// FilGetSealParamsCid function as declared in filecoin-ffi/filcrypto.h:883
>>>>>>> 05ee60b (temp)
func FilGetSealParamsCid(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealParamsPath function as declared in filecoin-ffi/filcrypto.h:882
=======
// FilGetSealParamsPath function as declared in filecoin-ffi/filcrypto.h:890
>>>>>>> 05ee60b (temp)
func FilGetSealParamsPath(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:888
=======
// FilGetSealVerifyingKeyCid function as declared in filecoin-ffi/filcrypto.h:896
>>>>>>> 05ee60b (temp)
func FilGetSealVerifyingKeyCid(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:895
=======
// FilGetSealVerifyingKeyPath function as declared in filecoin-ffi/filcrypto.h:903
>>>>>>> 05ee60b (temp)
func FilGetSealVerifyingKeyPath(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilGetSealVersion function as declared in filecoin-ffi/filcrypto.h:901
=======
// FilGetSealVersion function as declared in filecoin-ffi/filcrypto.h:909
>>>>>>> 05ee60b (temp)
func FilGetSealVersion(registeredProof FilRegisteredSealProof) *FilStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.fil_get_seal_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilHash function as declared in filecoin-ffi/filcrypto.h:911
=======
// FilHash function as declared in filecoin-ffi/filcrypto.h:919
>>>>>>> 05ee60b (temp)
func FilHash(messagePtr []byte, messageLen uint) *FilHashResponse {
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.fil_hash(cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	__v := NewFilHashResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilHashVerify function as declared in filecoin-ffi/filcrypto.h:925
=======
// FilHashVerify function as declared in filecoin-ffi/filcrypto.h:933
>>>>>>> 05ee60b (temp)
func FilHashVerify(signaturePtr []byte, flattenedMessagesPtr []byte, flattenedMessagesLen uint, messageSizesPtr []uint, messageSizesLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedMessagesPtr, cflattenedMessagesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedMessagesPtr)))
	cflattenedMessagesLen, cflattenedMessagesLenAllocMap := (C.size_t)(flattenedMessagesLen), cgoAllocsUnknown
	cmessageSizesPtr, cmessageSizesPtrAllocMap := copyPSizeTBytes((*sliceHeader)(unsafe.Pointer(&messageSizesPtr)))
	cmessageSizesLen, cmessageSizesLenAllocMap := (C.size_t)(messageSizesLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.fil_hash_verify(csignaturePtr, cflattenedMessagesPtr, cflattenedMessagesLen, cmessageSizesPtr, cmessageSizesLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cmessageSizesLenAllocMap)
	runtime.KeepAlive(cmessageSizesPtrAllocMap)
	runtime.KeepAlive(cflattenedMessagesLenAllocMap)
	runtime.KeepAlive(cflattenedMessagesPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

<<<<<<< HEAD
// FilInitLogFd function as declared in filecoin-ffi/filcrypto.h:942
=======
// FilInitLogFd function as declared in filecoin-ffi/filcrypto.h:950
>>>>>>> 05ee60b (temp)
func FilInitLogFd(logFd int32) *FilInitLogFdResponse {
	clogFd, clogFdAllocMap := (C.int)(logFd), cgoAllocsUnknown
	__ret := C.fil_init_log_fd(clogFd)
	runtime.KeepAlive(clogFdAllocMap)
	__v := NewFilInitLogFdResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilMergeWindowPostPartitionProofs function as declared in filecoin-ffi/filcrypto.h:948
=======
// FilMergeWindowPostPartitionProofs function as declared in filecoin-ffi/filcrypto.h:956
>>>>>>> 05ee60b (temp)
func FilMergeWindowPostPartitionProofs(registeredProof FilRegisteredPoStProof, partitionProofsPtr []FilPartitionSnarkProof, partitionProofsLen uint) *FilMergeWindowPoStPartitionProofsResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cpartitionProofsPtr, cpartitionProofsPtrAllocMap := unpackArgSFilPartitionSnarkProof(partitionProofsPtr)
	cpartitionProofsLen, cpartitionProofsLenAllocMap := (C.size_t)(partitionProofsLen), cgoAllocsUnknown
	__ret := C.fil_merge_window_post_partition_proofs(cregisteredProof, cpartitionProofsPtr, cpartitionProofsLen)
	runtime.KeepAlive(cpartitionProofsLenAllocMap)
	packSFilPartitionSnarkProof(partitionProofsPtr, cpartitionProofsPtr)
	runtime.KeepAlive(cpartitionProofsPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilMergeWindowPoStPartitionProofsResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilPrivateKeyGenerate function as declared in filecoin-ffi/filcrypto.h:955
=======
// FilPrivateKeyGenerate function as declared in filecoin-ffi/filcrypto.h:963
>>>>>>> 05ee60b (temp)
func FilPrivateKeyGenerate() *FilPrivateKeyGenerateResponse {
	__ret := C.fil_private_key_generate()
	__v := NewFilPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilPrivateKeyGenerateWithSeed function as declared in filecoin-ffi/filcrypto.h:968
=======
// FilPrivateKeyGenerateWithSeed function as declared in filecoin-ffi/filcrypto.h:976
>>>>>>> 05ee60b (temp)
func FilPrivateKeyGenerateWithSeed(rawSeed Fil32ByteArray) *FilPrivateKeyGenerateResponse {
	crawSeed, crawSeedAllocMap := rawSeed.PassValue()
	__ret := C.fil_private_key_generate_with_seed(crawSeed)
	runtime.KeepAlive(crawSeedAllocMap)
	__v := NewFilPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilPrivateKeyPublicKey function as declared in filecoin-ffi/filcrypto.h:979
=======
// FilPrivateKeyPublicKey function as declared in filecoin-ffi/filcrypto.h:987
>>>>>>> 05ee60b (temp)
func FilPrivateKeyPublicKey(rawPrivateKeyPtr []byte) *FilPrivateKeyPublicKeyResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	__ret := C.fil_private_key_public_key(crawPrivateKeyPtr)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewFilPrivateKeyPublicKeyResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilPrivateKeySign function as declared in filecoin-ffi/filcrypto.h:992
=======
// FilPrivateKeySign function as declared in filecoin-ffi/filcrypto.h:1000
>>>>>>> 05ee60b (temp)
func FilPrivateKeySign(rawPrivateKeyPtr []byte, messagePtr []byte, messageLen uint) *FilPrivateKeySignResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.fil_private_key_sign(crawPrivateKeyPtr, cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewFilPrivateKeySignResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilSealCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:1000
=======
// FilSealCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:1008
>>>>>>> 05ee60b (temp)
func FilSealCommitPhase1(registeredProof FilRegisteredSealProof, commR Fil32ByteArray, commD Fil32ByteArray, cacheDirPath string, replicaPath string, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, seed Fil32ByteArray, piecesPtr []FilPublicPieceInfo, piecesLen uint) *FilSealCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSFilPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.fil_seal_commit_phase1(cregisteredProof, ccommR, ccommD, ccacheDirPath, creplicaPath, csectorId, cproverId, cticket, cseed, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSFilPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilSealCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilSealCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:1012
=======
// FilSealCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:1020
>>>>>>> 05ee60b (temp)
func FilSealCommitPhase2(sealCommitPhase1OutputPtr []byte, sealCommitPhase1OutputLen uint, sectorId uint64, proverId Fil32ByteArray) *FilSealCommitPhase2Response {
	csealCommitPhase1OutputPtr, csealCommitPhase1OutputPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sealCommitPhase1OutputPtr)))
	csealCommitPhase1OutputLen, csealCommitPhase1OutputLenAllocMap := (C.size_t)(sealCommitPhase1OutputLen), cgoAllocsUnknown
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_seal_commit_phase2(csealCommitPhase1OutputPtr, csealCommitPhase1OutputLen, csectorId, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(csealCommitPhase1OutputLenAllocMap)
	runtime.KeepAlive(csealCommitPhase1OutputPtrAllocMap)
	__v := NewFilSealCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilSealPreCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:1021
=======
// FilSealPreCommitPhase1 function as declared in filecoin-ffi/filcrypto.h:1029
>>>>>>> 05ee60b (temp)
func FilSealPreCommitPhase1(registeredProof FilRegisteredSealProof, cacheDirPath string, stagedSectorPath string, sealedSectorPath string, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, piecesPtr []FilPublicPieceInfo, piecesLen uint) *FilSealPreCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	stagedSectorPath = safeString(stagedSectorPath)
	cstagedSectorPath, cstagedSectorPathAllocMap := unpackPCharString(stagedSectorPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSFilPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.fil_seal_pre_commit_phase1(cregisteredProof, ccacheDirPath, cstagedSectorPath, csealedSectorPath, csectorId, cproverId, cticket, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSFilPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(stagedSectorPath)
	runtime.KeepAlive(cstagedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilSealPreCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilSealPreCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:1035
=======
// FilSealPreCommitPhase2 function as declared in filecoin-ffi/filcrypto.h:1043
>>>>>>> 05ee60b (temp)
func FilSealPreCommitPhase2(sealPreCommitPhase1OutputPtr []byte, sealPreCommitPhase1OutputLen uint, cacheDirPath string, sealedSectorPath string) *FilSealPreCommitPhase2Response {
	csealPreCommitPhase1OutputPtr, csealPreCommitPhase1OutputPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sealPreCommitPhase1OutputPtr)))
	csealPreCommitPhase1OutputLen, csealPreCommitPhase1OutputLenAllocMap := (C.size_t)(sealPreCommitPhase1OutputLen), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	__ret := C.fil_seal_pre_commit_phase2(csealPreCommitPhase1OutputPtr, csealPreCommitPhase1OutputLen, ccacheDirPath, csealedSectorPath)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(csealPreCommitPhase1OutputLenAllocMap)
	runtime.KeepAlive(csealPreCommitPhase1OutputPtrAllocMap)
	__v := NewFilSealPreCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilUnsealRange function as declared in filecoin-ffi/filcrypto.h:1043
=======
// FilUnsealRange function as declared in filecoin-ffi/filcrypto.h:1051
>>>>>>> 05ee60b (temp)
func FilUnsealRange(registeredProof FilRegisteredSealProof, cacheDirPath string, sealedSectorFdRaw int32, unsealOutputFdRaw int32, sectorId uint64, proverId Fil32ByteArray, ticket Fil32ByteArray, commD Fil32ByteArray, unpaddedByteIndex uint64, unpaddedBytesAmount uint64) *FilUnsealRangeResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	csealedSectorFdRaw, csealedSectorFdRawAllocMap := (C.int)(sealedSectorFdRaw), cgoAllocsUnknown
	cunsealOutputFdRaw, cunsealOutputFdRawAllocMap := (C.int)(unsealOutputFdRaw), cgoAllocsUnknown
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cunpaddedByteIndex, cunpaddedByteIndexAllocMap := (C.uint64_t)(unpaddedByteIndex), cgoAllocsUnknown
	cunpaddedBytesAmount, cunpaddedBytesAmountAllocMap := (C.uint64_t)(unpaddedBytesAmount), cgoAllocsUnknown
	__ret := C.fil_unseal_range(cregisteredProof, ccacheDirPath, csealedSectorFdRaw, cunsealOutputFdRaw, csectorId, cproverId, cticket, ccommD, cunpaddedByteIndex, cunpaddedBytesAmount)
	runtime.KeepAlive(cunpaddedBytesAmountAllocMap)
	runtime.KeepAlive(cunpaddedByteIndexAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cunsealOutputFdRawAllocMap)
	runtime.KeepAlive(csealedSectorFdRawAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilUnsealRangeResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerify function as declared in filecoin-ffi/filcrypto.h:1065
=======
// FilVerify function as declared in filecoin-ffi/filcrypto.h:1073
>>>>>>> 05ee60b (temp)
func FilVerify(signaturePtr []byte, flattenedDigestsPtr []byte, flattenedDigestsLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedDigestsPtr, cflattenedDigestsPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedDigestsPtr)))
	cflattenedDigestsLen, cflattenedDigestsLenAllocMap := (C.size_t)(flattenedDigestsLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.fil_verify(csignaturePtr, cflattenedDigestsPtr, cflattenedDigestsLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cflattenedDigestsLenAllocMap)
	runtime.KeepAlive(cflattenedDigestsPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

<<<<<<< HEAD
// FilVerifyAggregateSealProof function as declared in filecoin-ffi/filcrypto.h:1075
=======
// FilVerifyAggregateSealProof function as declared in filecoin-ffi/filcrypto.h:1083
>>>>>>> 05ee60b (temp)
func FilVerifyAggregateSealProof(registeredProof FilRegisteredSealProof, registeredAggregation FilRegisteredAggregationProof, proverId Fil32ByteArray, proofPtr []byte, proofLen uint, commitInputsPtr []FilAggregationInputs, commitInputsLen uint) *FilVerifyAggregateSealProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.fil_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cproofPtr, cproofPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&proofPtr)))
	cproofLen, cproofLenAllocMap := (C.size_t)(proofLen), cgoAllocsUnknown
	ccommitInputsPtr, ccommitInputsPtrAllocMap := unpackArgSFilAggregationInputs(commitInputsPtr)
	ccommitInputsLen, ccommitInputsLenAllocMap := (C.size_t)(commitInputsLen), cgoAllocsUnknown
	__ret := C.fil_verify_aggregate_seal_proof(cregisteredProof, cregisteredAggregation, cproverId, cproofPtr, cproofLen, ccommitInputsPtr, ccommitInputsLen)
	runtime.KeepAlive(ccommitInputsLenAllocMap)
	packSFilAggregationInputs(commitInputsPtr, ccommitInputsPtr)
	runtime.KeepAlive(ccommitInputsPtrAllocMap)
	runtime.KeepAlive(cproofLenAllocMap)
	runtime.KeepAlive(cproofPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyAggregateSealProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerifyEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:1087
=======
// FilVerifyEmptySectorUpdatePartitionProofs function as declared in filecoin-ffi/filcrypto.h:1095
>>>>>>> 05ee60b (temp)
func FilVerifyEmptySectorUpdatePartitionProofs(registeredProof FilRegisteredUpdateProof, proofsLen uint, proofsPtr []FilPartitionProof, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilVerifyPartitionProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cproofsLen, cproofsLenAllocMap := (C.size_t)(proofsLen), cgoAllocsUnknown
	cproofsPtr, cproofsPtrAllocMap := unpackArgSFilPartitionProof(proofsPtr)
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_verify_empty_sector_update_partition_proofs(cregisteredProof, cproofsLen, cproofsPtr, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	packSFilPartitionProof(proofsPtr, cproofsPtr)
	runtime.KeepAlive(cproofsPtrAllocMap)
	runtime.KeepAlive(cproofsLenAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyPartitionProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerifyEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:1098
=======
// FilVerifyEmptySectorUpdateProof function as declared in filecoin-ffi/filcrypto.h:1106
>>>>>>> 05ee60b (temp)
func FilVerifyEmptySectorUpdateProof(registeredProof FilRegisteredUpdateProof, proofPtr []byte, proofLen uint, commROld Fil32ByteArray, commRNew Fil32ByteArray, commDNew Fil32ByteArray) *FilVerifyEmptySectorUpdateProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredUpdateProof)(registeredProof), cgoAllocsUnknown
	cproofPtr, cproofPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&proofPtr)))
	cproofLen, cproofLenAllocMap := (C.size_t)(proofLen), cgoAllocsUnknown
	ccommROld, ccommROldAllocMap := commROld.PassValue()
	ccommRNew, ccommRNewAllocMap := commRNew.PassValue()
	ccommDNew, ccommDNewAllocMap := commDNew.PassValue()
	__ret := C.fil_verify_empty_sector_update_proof(cregisteredProof, cproofPtr, cproofLen, ccommROld, ccommRNew, ccommDNew)
	runtime.KeepAlive(ccommDNewAllocMap)
	runtime.KeepAlive(ccommRNewAllocMap)
	runtime.KeepAlive(ccommROldAllocMap)
	runtime.KeepAlive(cproofLenAllocMap)
	runtime.KeepAlive(cproofPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifyEmptySectorUpdateProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerifySeal function as declared in filecoin-ffi/filcrypto.h:1109
=======
// FilVerifySeal function as declared in filecoin-ffi/filcrypto.h:1117
>>>>>>> 05ee60b (temp)
func FilVerifySeal(registeredProof FilRegisteredSealProof, commR Fil32ByteArray, commD Fil32ByteArray, proverId Fil32ByteArray, ticket Fil32ByteArray, seed Fil32ByteArray, sectorId uint64, proofPtr []byte, proofLen uint) *FilVerifySealResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproofPtr, cproofPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&proofPtr)))
	cproofLen, cproofLenAllocMap := (C.size_t)(proofLen), cgoAllocsUnknown
	__ret := C.fil_verify_seal(cregisteredProof, ccommR, ccommD, cproverId, cticket, cseed, csectorId, cproofPtr, cproofLen)
	runtime.KeepAlive(cproofLenAllocMap)
	runtime.KeepAlive(cproofPtrAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilVerifySealResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerifyWindowPost function as declared in filecoin-ffi/filcrypto.h:1122
=======
// FilVerifyWindowPost function as declared in filecoin-ffi/filcrypto.h:1130
>>>>>>> 05ee60b (temp)
func FilVerifyWindowPost(randomness Fil32ByteArray, replicasPtr []FilPublicReplicaInfo, replicasLen uint, proofsPtr []FilPoStProof, proofsLen uint, proverId Fil32ByteArray) *FilVerifyWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSFilPublicReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproofsPtr, cproofsPtrAllocMap := unpackArgSFilPoStProof(proofsPtr)
	cproofsLen, cproofsLenAllocMap := (C.size_t)(proofsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_verify_window_post(crandomness, creplicasPtr, creplicasLen, cproofsPtr, cproofsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cproofsLenAllocMap)
	packSFilPoStProof(proofsPtr, cproofsPtr)
	runtime.KeepAlive(cproofsPtrAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSFilPublicReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilVerifyWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilVerifyWinningPost function as declared in filecoin-ffi/filcrypto.h:1132
=======
// FilVerifyWinningPost function as declared in filecoin-ffi/filcrypto.h:1140
>>>>>>> 05ee60b (temp)
func FilVerifyWinningPost(randomness Fil32ByteArray, replicasPtr []FilPublicReplicaInfo, replicasLen uint, proofsPtr []FilPoStProof, proofsLen uint, proverId Fil32ByteArray) *FilVerifyWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSFilPublicReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproofsPtr, cproofsPtrAllocMap := unpackArgSFilPoStProof(proofsPtr)
	cproofsLen, cproofsLenAllocMap := (C.size_t)(proofsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.fil_verify_winning_post(crandomness, creplicasPtr, creplicasLen, cproofsPtr, cproofsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cproofsLenAllocMap)
	packSFilPoStProof(proofsPtr, cproofsPtr)
	runtime.KeepAlive(cproofsPtrAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSFilPublicReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewFilVerifyWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilWriteWithAlignment function as declared in filecoin-ffi/filcrypto.h:1143
=======
// FilWriteWithAlignment function as declared in filecoin-ffi/filcrypto.h:1151
>>>>>>> 05ee60b (temp)
func FilWriteWithAlignment(registeredProof FilRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32, existingPieceSizesPtr []uint64, existingPieceSizesLen uint) *FilWriteWithAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	cexistingPieceSizesPtr, cexistingPieceSizesPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&existingPieceSizesPtr)))
	cexistingPieceSizesLen, cexistingPieceSizesLenAllocMap := (C.size_t)(existingPieceSizesLen), cgoAllocsUnknown
	__ret := C.fil_write_with_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd, cexistingPieceSizesPtr, cexistingPieceSizesLen)
	runtime.KeepAlive(cexistingPieceSizesLenAllocMap)
	runtime.KeepAlive(cexistingPieceSizesPtrAllocMap)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilWriteWithAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

<<<<<<< HEAD
// FilWriteWithoutAlignment function as declared in filecoin-ffi/filcrypto.h:1154
=======
// FilWriteWithoutAlignment function as declared in filecoin-ffi/filcrypto.h:1162
>>>>>>> 05ee60b (temp)
func FilWriteWithoutAlignment(registeredProof FilRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32) *FilWriteWithoutAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.fil_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	__ret := C.fil_write_without_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewFilWriteWithoutAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}
